/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type ComponentsStruct = {
  rToken: string;
  stRSR: string;
  assetRegistry: string;
  basketHandler: string;
  backingManager: string;
  distributor: string;
  furnace: string;
  broker: string;
  rsrTrader: string;
  rTokenTrader: string;
};

export type ComponentsStructOutput = [
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string
] & {
  rToken: string;
  stRSR: string;
  assetRegistry: string;
  basketHandler: string;
  backingManager: string;
  distributor: string;
  furnace: string;
  broker: string;
  rsrTrader: string;
  rTokenTrader: string;
};

export type ImplementationsStruct = {
  main: string;
  components: ComponentsStruct;
  trade: string;
};

export type ImplementationsStructOutput = [
  string,
  ComponentsStructOutput,
  string
] & { main: string; components: ComponentsStructOutput; trade: string };

export type TradingRangeStruct = { min: BigNumberish; max: BigNumberish };

export type TradingRangeStructOutput = [BigNumber, BigNumber] & {
  min: BigNumber;
  max: BigNumber;
};

export type RevenueShareStruct = {
  rTokenDist: BigNumberish;
  rsrDist: BigNumberish;
};

export type RevenueShareStructOutput = [number, number] & {
  rTokenDist: number;
  rsrDist: number;
};

export type DeploymentParamsStruct = {
  freezeDuration: BigNumberish;
  tradingRange: TradingRangeStruct;
  dist: RevenueShareStruct;
  rewardPeriod: BigNumberish;
  rewardRatio: BigNumberish;
  unstakingDelay: BigNumberish;
  tradingDelay: BigNumberish;
  auctionLength: BigNumberish;
  backingBuffer: BigNumberish;
  maxTradeSlippage: BigNumberish;
  issuanceRate: BigNumberish;
};

export type DeploymentParamsStructOutput = [
  number,
  TradingRangeStructOutput,
  RevenueShareStructOutput,
  number,
  BigNumber,
  number,
  number,
  number,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  freezeDuration: number;
  tradingRange: TradingRangeStructOutput;
  dist: RevenueShareStructOutput;
  rewardPeriod: number;
  rewardRatio: BigNumber;
  unstakingDelay: number;
  tradingDelay: number;
  auctionLength: number;
  backingBuffer: BigNumber;
  maxTradeSlippage: BigNumber;
  issuanceRate: BigNumber;
};

export interface DeployerInterface extends utils.Interface {
  functions: {
    "ENS()": FunctionFragment;
    "deploy(string,string,string,address,(uint32,(uint192,uint192),(uint16,uint16),uint32,uint192,uint32,uint32,uint32,uint192,uint192,uint192))": FunctionFragment;
    "facade()": FunctionFragment;
    "gnosis()": FunctionFragment;
    "implementations()": FunctionFragment;
    "rsr()": FunctionFragment;
    "rsrAsset()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ENS"
      | "deploy"
      | "facade"
      | "gnosis"
      | "implementations"
      | "rsr"
      | "rsrAsset"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ENS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deploy",
    values: [string, string, string, string, DeploymentParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "facade", values?: undefined): string;
  encodeFunctionData(functionFragment: "gnosis", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "implementations",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rsr", values?: undefined): string;
  encodeFunctionData(functionFragment: "rsrAsset", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ENS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "facade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gnosis", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "implementations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rsr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rsrAsset", data: BytesLike): Result;

  events: {
    "RTokenCreated(address,address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RTokenCreated"): EventFragment;
}

export interface RTokenCreatedEventObject {
  main: string;
  rToken: string;
  stRSR: string;
  owner: string;
}
export type RTokenCreatedEvent = TypedEvent<
  [string, string, string, string],
  RTokenCreatedEventObject
>;

export type RTokenCreatedEventFilter = TypedEventFilter<RTokenCreatedEvent>;

export interface Deployer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DeployerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ENS(overrides?: CallOverrides): Promise<[string]>;

    deploy(
      name: string,
      symbol: string,
      manifestoURI: string,
      owner: string,
      params: DeploymentParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    facade(overrides?: CallOverrides): Promise<[string]>;

    gnosis(overrides?: CallOverrides): Promise<[string]>;

    implementations(
      overrides?: CallOverrides
    ): Promise<
      [string, ComponentsStructOutput, string] & {
        main: string;
        components: ComponentsStructOutput;
        trade: string;
      }
    >;

    rsr(overrides?: CallOverrides): Promise<[string]>;

    rsrAsset(overrides?: CallOverrides): Promise<[string]>;
  };

  ENS(overrides?: CallOverrides): Promise<string>;

  deploy(
    name: string,
    symbol: string,
    manifestoURI: string,
    owner: string,
    params: DeploymentParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  facade(overrides?: CallOverrides): Promise<string>;

  gnosis(overrides?: CallOverrides): Promise<string>;

  implementations(
    overrides?: CallOverrides
  ): Promise<
    [string, ComponentsStructOutput, string] & {
      main: string;
      components: ComponentsStructOutput;
      trade: string;
    }
  >;

  rsr(overrides?: CallOverrides): Promise<string>;

  rsrAsset(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ENS(overrides?: CallOverrides): Promise<string>;

    deploy(
      name: string,
      symbol: string,
      manifestoURI: string,
      owner: string,
      params: DeploymentParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    facade(overrides?: CallOverrides): Promise<string>;

    gnosis(overrides?: CallOverrides): Promise<string>;

    implementations(
      overrides?: CallOverrides
    ): Promise<
      [string, ComponentsStructOutput, string] & {
        main: string;
        components: ComponentsStructOutput;
        trade: string;
      }
    >;

    rsr(overrides?: CallOverrides): Promise<string>;

    rsrAsset(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "RTokenCreated(address,address,address,address)"(
      main?: string | null,
      rToken?: string | null,
      stRSR?: null,
      owner?: string | null
    ): RTokenCreatedEventFilter;
    RTokenCreated(
      main?: string | null,
      rToken?: string | null,
      stRSR?: null,
      owner?: string | null
    ): RTokenCreatedEventFilter;
  };

  estimateGas: {
    ENS(overrides?: CallOverrides): Promise<BigNumber>;

    deploy(
      name: string,
      symbol: string,
      manifestoURI: string,
      owner: string,
      params: DeploymentParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    facade(overrides?: CallOverrides): Promise<BigNumber>;

    gnosis(overrides?: CallOverrides): Promise<BigNumber>;

    implementations(overrides?: CallOverrides): Promise<BigNumber>;

    rsr(overrides?: CallOverrides): Promise<BigNumber>;

    rsrAsset(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ENS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deploy(
      name: string,
      symbol: string,
      manifestoURI: string,
      owner: string,
      params: DeploymentParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    facade(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gnosis(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    implementations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rsr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rsrAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IFacadeP1 {
  export type PendingStruct = {
    index: BigNumberish;
    availableAt: BigNumberish;
    amount: BigNumberish;
  };

  export type PendingStructOutput = [BigNumber, BigNumber, BigNumber] & {
    index: BigNumber;
    availableAt: BigNumber;
    amount: BigNumber;
  };
}

export interface FacadeInterface extends utils.Interface {
  functions: {
    "basketTokens()": FunctionFragment;
    "claimRewards()": FunctionFragment;
    "currentAssets()": FunctionFragment;
    "init(address)": FunctionFragment;
    "issue(uint256)": FunctionFragment;
    "main()": FunctionFragment;
    "maxIssuable(address)": FunctionFragment;
    "pendingIssuances(address)": FunctionFragment;
    "pendingUnstakings(address)": FunctionFragment;
    "runAuctionsForAllTraders()": FunctionFragment;
    "totalAssetValue()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "basketTokens"
      | "claimRewards"
      | "currentAssets"
      | "init"
      | "issue"
      | "main"
      | "maxIssuable"
      | "pendingIssuances"
      | "pendingUnstakings"
      | "runAuctionsForAllTraders"
      | "totalAssetValue"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "basketTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentAssets",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "init", values: [string]): string;
  encodeFunctionData(functionFragment: "issue", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "main", values?: undefined): string;
  encodeFunctionData(functionFragment: "maxIssuable", values: [string]): string;
  encodeFunctionData(
    functionFragment: "pendingIssuances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingUnstakings",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "runAuctionsForAllTraders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAssetValue",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "basketTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "main", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxIssuable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingIssuances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingUnstakings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "runAuctionsForAllTraders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAssetValue",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface Facade extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FacadeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    basketTokens(
      overrides?: CallOverrides
    ): Promise<[string[]] & { tokens: string[] }>;

    claimRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentAssets(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    init(
      main_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    issue(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    main(overrides?: CallOverrides): Promise<[string]>;

    maxIssuable(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pendingIssuances(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [IFacadeP1.PendingStructOutput[]] & {
        issuances: IFacadeP1.PendingStructOutput[];
      }
    >;

    pendingUnstakings(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [IFacadeP1.PendingStructOutput[]] & {
        unstakings: IFacadeP1.PendingStructOutput[];
      }
    >;

    runAuctionsForAllTraders(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalAssetValue(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  basketTokens(overrides?: CallOverrides): Promise<string[]>;

  claimRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentAssets(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  init(
    main_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  issue(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  main(overrides?: CallOverrides): Promise<string>;

  maxIssuable(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pendingIssuances(
    account: string,
    overrides?: CallOverrides
  ): Promise<IFacadeP1.PendingStructOutput[]>;

  pendingUnstakings(
    account: string,
    overrides?: CallOverrides
  ): Promise<IFacadeP1.PendingStructOutput[]>;

  runAuctionsForAllTraders(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalAssetValue(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    basketTokens(overrides?: CallOverrides): Promise<string[]>;

    claimRewards(overrides?: CallOverrides): Promise<void>;

    currentAssets(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    init(main_: string, overrides?: CallOverrides): Promise<void>;

    issue(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    main(overrides?: CallOverrides): Promise<string>;

    maxIssuable(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    pendingIssuances(
      account: string,
      overrides?: CallOverrides
    ): Promise<IFacadeP1.PendingStructOutput[]>;

    pendingUnstakings(
      account: string,
      overrides?: CallOverrides
    ): Promise<IFacadeP1.PendingStructOutput[]>;

    runAuctionsForAllTraders(overrides?: CallOverrides): Promise<void>;

    totalAssetValue(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    basketTokens(overrides?: CallOverrides): Promise<BigNumber>;

    claimRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentAssets(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    init(
      main_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    issue(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    main(overrides?: CallOverrides): Promise<BigNumber>;

    maxIssuable(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pendingIssuances(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingUnstakings(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    runAuctionsForAllTraders(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalAssetValue(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    basketTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentAssets(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    init(
      main_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    issue(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    main(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxIssuable(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pendingIssuances(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingUnstakings(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    runAuctionsForAllTraders(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalAssetValue(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

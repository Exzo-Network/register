/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MainInterface extends ethers.utils.Interface {
  functions: {
    "aaveAsset()": FunctionFragment;
    "aaveLendingPool()": FunctionFragment;
    "backingTokens()": FunctionFragment;
    "compAsset()": FunctionFragment;
    "comptroller()": FunctionFragment;
    "config()": FunctionFragment;
    "consultOracle(uint8,address)": FunctionFragment;
    "furnace()": FunctionFragment;
    "issuances(uint256)": FunctionFragment;
    "issue(uint256)": FunctionFragment;
    "manager()": FunctionFragment;
    "monitor()": FunctionFragment;
    "nextRewards()": FunctionFragment;
    "noticeDefault()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pauser()": FunctionFragment;
    "poke()": FunctionFragment;
    "quote(uint256)": FunctionFragment;
    "rToken()": FunctionFragment;
    "rTokenAsset()": FunctionFragment;
    "redeem(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rsr()": FunctionFragment;
    "rsrAsset()": FunctionFragment;
    "setAssets(address,address,address,address)": FunctionFragment;
    "setConfig((uint256,uint256,uint256,uint256,uint256,int192,int192,int192,int192,int192,int192,int192,int192))": FunctionFragment;
    "setFurnace(address)": FunctionFragment;
    "setManager(address)": FunctionFragment;
    "setMonitor(address)": FunctionFragment;
    "setOracle((address,address))": FunctionFragment;
    "setPauser(address)": FunctionFragment;
    "setStRSR(address)": FunctionFragment;
    "stRSR()": FunctionFragment;
    "state()": FunctionFragment;
    "stateRaisedAt()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "aaveAsset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "aaveLendingPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "backingTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "compAsset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "comptroller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "consultOracle",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "furnace", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "issuances",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "issue", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(functionFragment: "monitor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "noticeDefault",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pauser", values?: undefined): string;
  encodeFunctionData(functionFragment: "poke", values?: undefined): string;
  encodeFunctionData(functionFragment: "quote", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "rToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rTokenAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rsr", values?: undefined): string;
  encodeFunctionData(functionFragment: "rsrAsset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAssets",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [
      {
        rewardStart: BigNumberish;
        rewardPeriod: BigNumberish;
        auctionPeriod: BigNumberish;
        stRSRWithdrawalDelay: BigNumberish;
        defaultDelay: BigNumberish;
        maxTradeSlippage: BigNumberish;
        maxAuctionSize: BigNumberish;
        minRecapitalizationAuctionSize: BigNumberish;
        minRevenueAuctionSize: BigNumberish;
        migrationChunk: BigNumberish;
        issuanceRate: BigNumberish;
        defaultThreshold: BigNumberish;
        f: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "setFurnace", values: [string]): string;
  encodeFunctionData(functionFragment: "setManager", values: [string]): string;
  encodeFunctionData(functionFragment: "setMonitor", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setOracle",
    values: [{ compound: string; aave: string }]
  ): string;
  encodeFunctionData(functionFragment: "setPauser", values: [string]): string;
  encodeFunctionData(functionFragment: "setStRSR", values: [string]): string;
  encodeFunctionData(functionFragment: "stRSR", values?: undefined): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stateRaisedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "aaveAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "aaveLendingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "backingTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "compAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "comptroller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "consultOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "furnace", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issuances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "monitor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "noticeDefault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poke", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rTokenAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rsr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rsrAsset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAssets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFurnace", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMonitor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPauser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setStRSR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stRSR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stateRaisedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "IssuanceCanceled(uint256)": EventFragment;
    "IssuanceCompleted(uint256)": EventFragment;
    "IssuanceStarted(uint256,address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Redemption(address,uint256)": EventFragment;
    "SystemStateChanged(uint8,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "IssuanceCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IssuanceCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IssuanceStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redemption"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SystemStateChanged"): EventFragment;
}

export type IssuanceCanceledEvent = TypedEvent<
  [BigNumber] & { issuanceId: BigNumber }
>;

export type IssuanceCompletedEvent = TypedEvent<
  [BigNumber] & { issuanceId: BigNumber }
>;

export type IssuanceStartedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber] & {
    issuanceId: BigNumber;
    issuer: string;
    amount: BigNumber;
    blockAvailableAt: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RedemptionEvent = TypedEvent<
  [string, BigNumber] & { redeemer: string; amount: BigNumber }
>;

export type SystemStateChangedEvent = TypedEvent<
  [number, number] & { oldState: number; newState: number }
>;

export class Main extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MainInterface;

  functions: {
    aaveAsset(overrides?: CallOverrides): Promise<[string]>;

    aaveLendingPool(overrides?: CallOverrides): Promise<[string]>;

    backingTokens(
      overrides?: CallOverrides
    ): Promise<[string[]] & { erc20s: string[] }>;

    compAsset(overrides?: CallOverrides): Promise<[string]>;

    comptroller(overrides?: CallOverrides): Promise<[string]>;

    config(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          rewardStart: BigNumber;
          rewardPeriod: BigNumber;
          auctionPeriod: BigNumber;
          stRSRWithdrawalDelay: BigNumber;
          defaultDelay: BigNumber;
          maxTradeSlippage: BigNumber;
          maxAuctionSize: BigNumber;
          minRecapitalizationAuctionSize: BigNumber;
          minRevenueAuctionSize: BigNumber;
          migrationChunk: BigNumber;
          issuanceRate: BigNumber;
          defaultThreshold: BigNumber;
          f: BigNumber;
        }
      ]
    >;

    consultOracle(
      source: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    furnace(overrides?: CallOverrides): Promise<[string]>;

    issuances(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, BigNumber, boolean] & {
        vault: string;
        amount: BigNumber;
        BUs: BigNumber;
        issuer: string;
        blockAvailableAt: BigNumber;
        processed: boolean;
      }
    >;

    issue(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    monitor(overrides?: CallOverrides): Promise<[string]>;

    nextRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    noticeDefault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pauser(overrides?: CallOverrides): Promise<[string]>;

    poke(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    quote(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    rToken(overrides?: CallOverrides): Promise<[string]>;

    rTokenAsset(overrides?: CallOverrides): Promise<[string]>;

    redeem(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rsr(overrides?: CallOverrides): Promise<[string]>;

    rsrAsset(overrides?: CallOverrides): Promise<[string]>;

    setAssets(
      rToken_: string,
      rsr_: string,
      comp_: string,
      aave_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setConfig(
      config_: {
        rewardStart: BigNumberish;
        rewardPeriod: BigNumberish;
        auctionPeriod: BigNumberish;
        stRSRWithdrawalDelay: BigNumberish;
        defaultDelay: BigNumberish;
        maxTradeSlippage: BigNumberish;
        maxAuctionSize: BigNumberish;
        minRecapitalizationAuctionSize: BigNumberish;
        minRevenueAuctionSize: BigNumberish;
        migrationChunk: BigNumberish;
        issuanceRate: BigNumberish;
        defaultThreshold: BigNumberish;
        f: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFurnace(
      furnace_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setManager(
      manager_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMonitor(
      monitor_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracle(
      oracle: { compound: string; aave: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPauser(
      pauser_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStRSR(
      stRSR_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stRSR(overrides?: CallOverrides): Promise<[string]>;

    state(overrides?: CallOverrides): Promise<[number]>;

    stateRaisedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  aaveAsset(overrides?: CallOverrides): Promise<string>;

  aaveLendingPool(overrides?: CallOverrides): Promise<string>;

  backingTokens(overrides?: CallOverrides): Promise<string[]>;

  compAsset(overrides?: CallOverrides): Promise<string>;

  comptroller(overrides?: CallOverrides): Promise<string>;

  config(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      rewardStart: BigNumber;
      rewardPeriod: BigNumber;
      auctionPeriod: BigNumber;
      stRSRWithdrawalDelay: BigNumber;
      defaultDelay: BigNumber;
      maxTradeSlippage: BigNumber;
      maxAuctionSize: BigNumber;
      minRecapitalizationAuctionSize: BigNumber;
      minRevenueAuctionSize: BigNumber;
      migrationChunk: BigNumber;
      issuanceRate: BigNumber;
      defaultThreshold: BigNumber;
      f: BigNumber;
    }
  >;

  consultOracle(
    source: BigNumberish,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  furnace(overrides?: CallOverrides): Promise<string>;

  issuances(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, string, BigNumber, boolean] & {
      vault: string;
      amount: BigNumber;
      BUs: BigNumber;
      issuer: string;
      blockAvailableAt: BigNumber;
      processed: boolean;
    }
  >;

  issue(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  manager(overrides?: CallOverrides): Promise<string>;

  monitor(overrides?: CallOverrides): Promise<string>;

  nextRewards(overrides?: CallOverrides): Promise<BigNumber>;

  noticeDefault(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pauser(overrides?: CallOverrides): Promise<string>;

  poke(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  quote(amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber[]>;

  rToken(overrides?: CallOverrides): Promise<string>;

  rTokenAsset(overrides?: CallOverrides): Promise<string>;

  redeem(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rsr(overrides?: CallOverrides): Promise<string>;

  rsrAsset(overrides?: CallOverrides): Promise<string>;

  setAssets(
    rToken_: string,
    rsr_: string,
    comp_: string,
    aave_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setConfig(
    config_: {
      rewardStart: BigNumberish;
      rewardPeriod: BigNumberish;
      auctionPeriod: BigNumberish;
      stRSRWithdrawalDelay: BigNumberish;
      defaultDelay: BigNumberish;
      maxTradeSlippage: BigNumberish;
      maxAuctionSize: BigNumberish;
      minRecapitalizationAuctionSize: BigNumberish;
      minRevenueAuctionSize: BigNumberish;
      migrationChunk: BigNumberish;
      issuanceRate: BigNumberish;
      defaultThreshold: BigNumberish;
      f: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFurnace(
    furnace_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setManager(
    manager_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMonitor(
    monitor_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracle(
    oracle: { compound: string; aave: string },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPauser(
    pauser_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStRSR(
    stRSR_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stRSR(overrides?: CallOverrides): Promise<string>;

  state(overrides?: CallOverrides): Promise<number>;

  stateRaisedAt(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    aaveAsset(overrides?: CallOverrides): Promise<string>;

    aaveLendingPool(overrides?: CallOverrides): Promise<string>;

    backingTokens(overrides?: CallOverrides): Promise<string[]>;

    compAsset(overrides?: CallOverrides): Promise<string>;

    comptroller(overrides?: CallOverrides): Promise<string>;

    config(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        rewardStart: BigNumber;
        rewardPeriod: BigNumber;
        auctionPeriod: BigNumber;
        stRSRWithdrawalDelay: BigNumber;
        defaultDelay: BigNumber;
        maxTradeSlippage: BigNumber;
        maxAuctionSize: BigNumber;
        minRecapitalizationAuctionSize: BigNumber;
        minRevenueAuctionSize: BigNumber;
        migrationChunk: BigNumber;
        issuanceRate: BigNumber;
        defaultThreshold: BigNumber;
        f: BigNumber;
      }
    >;

    consultOracle(
      source: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    furnace(overrides?: CallOverrides): Promise<string>;

    issuances(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, BigNumber, boolean] & {
        vault: string;
        amount: BigNumber;
        BUs: BigNumber;
        issuer: string;
        blockAvailableAt: BigNumber;
        processed: boolean;
      }
    >;

    issue(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    manager(overrides?: CallOverrides): Promise<string>;

    monitor(overrides?: CallOverrides): Promise<string>;

    nextRewards(overrides?: CallOverrides): Promise<BigNumber>;

    noticeDefault(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pauser(overrides?: CallOverrides): Promise<string>;

    poke(overrides?: CallOverrides): Promise<void>;

    quote(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    rToken(overrides?: CallOverrides): Promise<string>;

    rTokenAsset(overrides?: CallOverrides): Promise<string>;

    redeem(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rsr(overrides?: CallOverrides): Promise<string>;

    rsrAsset(overrides?: CallOverrides): Promise<string>;

    setAssets(
      rToken_: string,
      rsr_: string,
      comp_: string,
      aave_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setConfig(
      config_: {
        rewardStart: BigNumberish;
        rewardPeriod: BigNumberish;
        auctionPeriod: BigNumberish;
        stRSRWithdrawalDelay: BigNumberish;
        defaultDelay: BigNumberish;
        maxTradeSlippage: BigNumberish;
        maxAuctionSize: BigNumberish;
        minRecapitalizationAuctionSize: BigNumberish;
        minRevenueAuctionSize: BigNumberish;
        migrationChunk: BigNumberish;
        issuanceRate: BigNumberish;
        defaultThreshold: BigNumberish;
        f: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setFurnace(furnace_: string, overrides?: CallOverrides): Promise<void>;

    setManager(manager_: string, overrides?: CallOverrides): Promise<void>;

    setMonitor(monitor_: string, overrides?: CallOverrides): Promise<void>;

    setOracle(
      oracle: { compound: string; aave: string },
      overrides?: CallOverrides
    ): Promise<void>;

    setPauser(pauser_: string, overrides?: CallOverrides): Promise<void>;

    setStRSR(stRSR_: string, overrides?: CallOverrides): Promise<void>;

    stRSR(overrides?: CallOverrides): Promise<string>;

    state(overrides?: CallOverrides): Promise<number>;

    stateRaisedAt(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "IssuanceCanceled(uint256)"(
      issuanceId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { issuanceId: BigNumber }>;

    IssuanceCanceled(
      issuanceId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { issuanceId: BigNumber }>;

    "IssuanceCompleted(uint256)"(
      issuanceId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { issuanceId: BigNumber }>;

    IssuanceCompleted(
      issuanceId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { issuanceId: BigNumber }>;

    "IssuanceStarted(uint256,address,uint256,uint256)"(
      issuanceId?: BigNumberish | null,
      issuer?: string | null,
      amount?: BigNumberish | null,
      blockAvailableAt?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber],
      {
        issuanceId: BigNumber;
        issuer: string;
        amount: BigNumber;
        blockAvailableAt: BigNumber;
      }
    >;

    IssuanceStarted(
      issuanceId?: BigNumberish | null,
      issuer?: string | null,
      amount?: BigNumberish | null,
      blockAvailableAt?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber],
      {
        issuanceId: BigNumber;
        issuer: string;
        amount: BigNumber;
        blockAvailableAt: BigNumber;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Redemption(address,uint256)"(
      redeemer?: string | null,
      amount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { redeemer: string; amount: BigNumber }
    >;

    Redemption(
      redeemer?: string | null,
      amount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { redeemer: string; amount: BigNumber }
    >;

    "SystemStateChanged(uint8,uint8)"(
      oldState?: BigNumberish | null,
      newState?: BigNumberish | null
    ): TypedEventFilter<
      [number, number],
      { oldState: number; newState: number }
    >;

    SystemStateChanged(
      oldState?: BigNumberish | null,
      newState?: BigNumberish | null
    ): TypedEventFilter<
      [number, number],
      { oldState: number; newState: number }
    >;
  };

  estimateGas: {
    aaveAsset(overrides?: CallOverrides): Promise<BigNumber>;

    aaveLendingPool(overrides?: CallOverrides): Promise<BigNumber>;

    backingTokens(overrides?: CallOverrides): Promise<BigNumber>;

    compAsset(overrides?: CallOverrides): Promise<BigNumber>;

    comptroller(overrides?: CallOverrides): Promise<BigNumber>;

    config(overrides?: CallOverrides): Promise<BigNumber>;

    consultOracle(
      source: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    furnace(overrides?: CallOverrides): Promise<BigNumber>;

    issuances(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issue(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    monitor(overrides?: CallOverrides): Promise<BigNumber>;

    nextRewards(overrides?: CallOverrides): Promise<BigNumber>;

    noticeDefault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pauser(overrides?: CallOverrides): Promise<BigNumber>;

    poke(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    quote(amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    rToken(overrides?: CallOverrides): Promise<BigNumber>;

    rTokenAsset(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rsr(overrides?: CallOverrides): Promise<BigNumber>;

    rsrAsset(overrides?: CallOverrides): Promise<BigNumber>;

    setAssets(
      rToken_: string,
      rsr_: string,
      comp_: string,
      aave_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setConfig(
      config_: {
        rewardStart: BigNumberish;
        rewardPeriod: BigNumberish;
        auctionPeriod: BigNumberish;
        stRSRWithdrawalDelay: BigNumberish;
        defaultDelay: BigNumberish;
        maxTradeSlippage: BigNumberish;
        maxAuctionSize: BigNumberish;
        minRecapitalizationAuctionSize: BigNumberish;
        minRevenueAuctionSize: BigNumberish;
        migrationChunk: BigNumberish;
        issuanceRate: BigNumberish;
        defaultThreshold: BigNumberish;
        f: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFurnace(
      furnace_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setManager(
      manager_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMonitor(
      monitor_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracle(
      oracle: { compound: string; aave: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPauser(
      pauser_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStRSR(
      stRSR_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stRSR(overrides?: CallOverrides): Promise<BigNumber>;

    state(overrides?: CallOverrides): Promise<BigNumber>;

    stateRaisedAt(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    aaveAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aaveLendingPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    backingTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    compAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    comptroller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    config(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    consultOracle(
      source: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    furnace(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    issuances(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issue(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    monitor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    noticeDefault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poke(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    quote(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rTokenAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rsr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rsrAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAssets(
      rToken_: string,
      rsr_: string,
      comp_: string,
      aave_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setConfig(
      config_: {
        rewardStart: BigNumberish;
        rewardPeriod: BigNumberish;
        auctionPeriod: BigNumberish;
        stRSRWithdrawalDelay: BigNumberish;
        defaultDelay: BigNumberish;
        maxTradeSlippage: BigNumberish;
        maxAuctionSize: BigNumberish;
        minRecapitalizationAuctionSize: BigNumberish;
        minRevenueAuctionSize: BigNumberish;
        migrationChunk: BigNumberish;
        issuanceRate: BigNumberish;
        defaultThreshold: BigNumberish;
        f: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFurnace(
      furnace_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setManager(
      manager_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMonitor(
      monitor_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracle(
      oracle: { compound: string; aave: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPauser(
      pauser_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStRSR(
      stRSR_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stRSR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    state(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stateRaisedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type ComponentsStruct = {
  rToken: string;
  stRSR: string;
  assetRegistry: string;
  basketHandler: string;
  backingManager: string;
  distributor: string;
  furnace: string;
  broker: string;
  rsrTrader: string;
  rTokenTrader: string;
};

export type ComponentsStructOutput = [
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string
] & {
  rToken: string;
  stRSR: string;
  assetRegistry: string;
  basketHandler: string;
  backingManager: string;
  distributor: string;
  furnace: string;
  broker: string;
  rsrTrader: string;
  rTokenTrader: string;
};

export interface MainInterface extends utils.Interface {
  functions: {
    "assetRegistry()": FunctionFragment;
    "backingManager()": FunctionFragment;
    "basketHandler()": FunctionFragment;
    "broker()": FunctionFragment;
    "distributor()": FunctionFragment;
    "furnace()": FunctionFragment;
    "init((address,address,address,address,address,address,address,address,address,address),address,uint32)": FunctionFragment;
    "isComponent(address)": FunctionFragment;
    "oneshotPauseDuration()": FunctionFragment;
    "oneshotPauser()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "poke()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "rToken()": FunctionFragment;
    "rTokenTrader()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renouncePausership()": FunctionFragment;
    "rsr()": FunctionFragment;
    "rsrTrader()": FunctionFragment;
    "setAssetRegistry(address)": FunctionFragment;
    "setBackingManager(address)": FunctionFragment;
    "setBasketHandler(address)": FunctionFragment;
    "setBroker(address)": FunctionFragment;
    "setDistributor(address)": FunctionFragment;
    "setFurnace(address)": FunctionFragment;
    "setOneshotPauseDuration(uint32)": FunctionFragment;
    "setOneshotPauser(address)": FunctionFragment;
    "setRSRTrader(address)": FunctionFragment;
    "setRToken(address)": FunctionFragment;
    "setRTokenTrader(address)": FunctionFragment;
    "setStRSR(address)": FunctionFragment;
    "stRSR()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "unpauseAt()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "assetRegistry"
      | "backingManager"
      | "basketHandler"
      | "broker"
      | "distributor"
      | "furnace"
      | "init"
      | "isComponent"
      | "oneshotPauseDuration"
      | "oneshotPauser"
      | "owner"
      | "pause"
      | "paused"
      | "poke"
      | "proxiableUUID"
      | "rToken"
      | "rTokenTrader"
      | "renounceOwnership"
      | "renouncePausership"
      | "rsr"
      | "rsrTrader"
      | "setAssetRegistry"
      | "setBackingManager"
      | "setBasketHandler"
      | "setBroker"
      | "setDistributor"
      | "setFurnace"
      | "setOneshotPauseDuration"
      | "setOneshotPauser"
      | "setRSRTrader"
      | "setRToken"
      | "setRTokenTrader"
      | "setStRSR"
      | "stRSR"
      | "transferOwnership"
      | "unpause"
      | "unpauseAt"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "assetRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "backingManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "basketHandler",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "broker", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "distributor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "furnace", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [ComponentsStruct, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isComponent", values: [string]): string;
  encodeFunctionData(
    functionFragment: "oneshotPauseDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oneshotPauser",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "poke", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rTokenTrader",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renouncePausership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rsr", values?: undefined): string;
  encodeFunctionData(functionFragment: "rsrTrader", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAssetRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBackingManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBasketHandler",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setBroker", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setDistributor",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setFurnace", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setOneshotPauseDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOneshotPauser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRSRTrader",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setRToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setRTokenTrader",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setStRSR", values: [string]): string;
  encodeFunctionData(functionFragment: "stRSR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpauseAt", values?: undefined): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "assetRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "backingManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "basketHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "broker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "furnace", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isComponent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oneshotPauseDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oneshotPauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rTokenTrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renouncePausership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rsr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rsrTrader", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAssetRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBackingManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBasketHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBroker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFurnace", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOneshotPauseDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOneshotPauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRSRTrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRTokenTrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStRSR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stRSR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpauseAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "AssetRegistrySet(address,address)": EventFragment;
    "BackingManagerSet(address,address)": EventFragment;
    "BasketHandlerSet(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "BrokerSet(address,address)": EventFragment;
    "DistributorSet(address,address)": EventFragment;
    "FurnaceSet(address,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MainInitialized()": EventFragment;
    "OneshotPauseDurationSet(uint32,uint32)": EventFragment;
    "OneshotPauserSet(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RSRTraderSet(address,address)": EventFragment;
    "RTokenSet(address,address)": EventFragment;
    "RTokenTraderSet(address,address)": EventFragment;
    "StRSRSet(address,address)": EventFragment;
    "UnpauseAtSet(uint32,uint32)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetRegistrySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BackingManagerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BasketHandlerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BrokerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributorSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FurnaceSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MainInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OneshotPauseDurationSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OneshotPauserSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RSRTraderSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RTokenSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RTokenTraderSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StRSRSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnpauseAtSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface AssetRegistrySetEventObject {
  oldVal: string;
  newVal: string;
}
export type AssetRegistrySetEvent = TypedEvent<
  [string, string],
  AssetRegistrySetEventObject
>;

export type AssetRegistrySetEventFilter =
  TypedEventFilter<AssetRegistrySetEvent>;

export interface BackingManagerSetEventObject {
  oldVal: string;
  newVal: string;
}
export type BackingManagerSetEvent = TypedEvent<
  [string, string],
  BackingManagerSetEventObject
>;

export type BackingManagerSetEventFilter =
  TypedEventFilter<BackingManagerSetEvent>;

export interface BasketHandlerSetEventObject {
  oldVal: string;
  newVal: string;
}
export type BasketHandlerSetEvent = TypedEvent<
  [string, string],
  BasketHandlerSetEventObject
>;

export type BasketHandlerSetEventFilter =
  TypedEventFilter<BasketHandlerSetEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface BrokerSetEventObject {
  oldVal: string;
  newVal: string;
}
export type BrokerSetEvent = TypedEvent<[string, string], BrokerSetEventObject>;

export type BrokerSetEventFilter = TypedEventFilter<BrokerSetEvent>;

export interface DistributorSetEventObject {
  oldVal: string;
  newVal: string;
}
export type DistributorSetEvent = TypedEvent<
  [string, string],
  DistributorSetEventObject
>;

export type DistributorSetEventFilter = TypedEventFilter<DistributorSetEvent>;

export interface FurnaceSetEventObject {
  oldVal: string;
  newVal: string;
}
export type FurnaceSetEvent = TypedEvent<
  [string, string],
  FurnaceSetEventObject
>;

export type FurnaceSetEventFilter = TypedEventFilter<FurnaceSetEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MainInitializedEventObject {}
export type MainInitializedEvent = TypedEvent<[], MainInitializedEventObject>;

export type MainInitializedEventFilter = TypedEventFilter<MainInitializedEvent>;

export interface OneshotPauseDurationSetEventObject {
  oldDuration: number;
  newDuration: number;
}
export type OneshotPauseDurationSetEvent = TypedEvent<
  [number, number],
  OneshotPauseDurationSetEventObject
>;

export type OneshotPauseDurationSetEventFilter =
  TypedEventFilter<OneshotPauseDurationSetEvent>;

export interface OneshotPauserSetEventObject {
  oldPauser: string;
  newPauser: string;
}
export type OneshotPauserSetEvent = TypedEvent<
  [string, string],
  OneshotPauserSetEventObject
>;

export type OneshotPauserSetEventFilter =
  TypedEventFilter<OneshotPauserSetEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RSRTraderSetEventObject {
  oldVal: string;
  newVal: string;
}
export type RSRTraderSetEvent = TypedEvent<
  [string, string],
  RSRTraderSetEventObject
>;

export type RSRTraderSetEventFilter = TypedEventFilter<RSRTraderSetEvent>;

export interface RTokenSetEventObject {
  oldVal: string;
  newVal: string;
}
export type RTokenSetEvent = TypedEvent<[string, string], RTokenSetEventObject>;

export type RTokenSetEventFilter = TypedEventFilter<RTokenSetEvent>;

export interface RTokenTraderSetEventObject {
  oldVal: string;
  newVal: string;
}
export type RTokenTraderSetEvent = TypedEvent<
  [string, string],
  RTokenTraderSetEventObject
>;

export type RTokenTraderSetEventFilter = TypedEventFilter<RTokenTraderSetEvent>;

export interface StRSRSetEventObject {
  oldVal: string;
  newVal: string;
}
export type StRSRSetEvent = TypedEvent<[string, string], StRSRSetEventObject>;

export type StRSRSetEventFilter = TypedEventFilter<StRSRSetEvent>;

export interface UnpauseAtSetEventObject {
  oldUnpauseAt: number;
  newUnpauseAt: number;
}
export type UnpauseAtSetEvent = TypedEvent<
  [number, number],
  UnpauseAtSetEventObject
>;

export type UnpauseAtSetEventFilter = TypedEventFilter<UnpauseAtSetEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface Main extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MainInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    assetRegistry(overrides?: CallOverrides): Promise<[string]>;

    backingManager(overrides?: CallOverrides): Promise<[string]>;

    basketHandler(overrides?: CallOverrides): Promise<[string]>;

    broker(overrides?: CallOverrides): Promise<[string]>;

    distributor(overrides?: CallOverrides): Promise<[string]>;

    furnace(overrides?: CallOverrides): Promise<[string]>;

    init(
      components: ComponentsStruct,
      rsr_: string,
      oneshotPauseDuration_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isComponent(
      componentAddr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    oneshotPauseDuration(overrides?: CallOverrides): Promise<[number]>;

    oneshotPauser(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    poke(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    rToken(overrides?: CallOverrides): Promise<[string]>;

    rTokenTrader(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renouncePausership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rsr(overrides?: CallOverrides): Promise<[string]>;

    rsrTrader(overrides?: CallOverrides): Promise<[string]>;

    setAssetRegistry(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBackingManager(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBasketHandler(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBroker(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDistributor(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFurnace(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOneshotPauseDuration(
      oneshotPauseDuration_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOneshotPauser(
      oneshotPauser_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRSRTrader(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRToken(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRTokenTrader(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStRSR(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stRSR(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpauseAt(overrides?: CallOverrides): Promise<[number]>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  assetRegistry(overrides?: CallOverrides): Promise<string>;

  backingManager(overrides?: CallOverrides): Promise<string>;

  basketHandler(overrides?: CallOverrides): Promise<string>;

  broker(overrides?: CallOverrides): Promise<string>;

  distributor(overrides?: CallOverrides): Promise<string>;

  furnace(overrides?: CallOverrides): Promise<string>;

  init(
    components: ComponentsStruct,
    rsr_: string,
    oneshotPauseDuration_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isComponent(
    componentAddr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  oneshotPauseDuration(overrides?: CallOverrides): Promise<number>;

  oneshotPauser(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  poke(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  rToken(overrides?: CallOverrides): Promise<string>;

  rTokenTrader(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renouncePausership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rsr(overrides?: CallOverrides): Promise<string>;

  rsrTrader(overrides?: CallOverrides): Promise<string>;

  setAssetRegistry(
    val: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBackingManager(
    val: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBasketHandler(
    val: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBroker(
    val: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDistributor(
    val: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFurnace(
    val: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOneshotPauseDuration(
    oneshotPauseDuration_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOneshotPauser(
    oneshotPauser_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRSRTrader(
    val: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRToken(
    val: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRTokenTrader(
    val: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStRSR(
    val: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stRSR(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpauseAt(overrides?: CallOverrides): Promise<number>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    assetRegistry(overrides?: CallOverrides): Promise<string>;

    backingManager(overrides?: CallOverrides): Promise<string>;

    basketHandler(overrides?: CallOverrides): Promise<string>;

    broker(overrides?: CallOverrides): Promise<string>;

    distributor(overrides?: CallOverrides): Promise<string>;

    furnace(overrides?: CallOverrides): Promise<string>;

    init(
      components: ComponentsStruct,
      rsr_: string,
      oneshotPauseDuration_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isComponent(
      componentAddr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    oneshotPauseDuration(overrides?: CallOverrides): Promise<number>;

    oneshotPauser(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    poke(overrides?: CallOverrides): Promise<void>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    rToken(overrides?: CallOverrides): Promise<string>;

    rTokenTrader(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renouncePausership(overrides?: CallOverrides): Promise<void>;

    rsr(overrides?: CallOverrides): Promise<string>;

    rsrTrader(overrides?: CallOverrides): Promise<string>;

    setAssetRegistry(val: string, overrides?: CallOverrides): Promise<void>;

    setBackingManager(val: string, overrides?: CallOverrides): Promise<void>;

    setBasketHandler(val: string, overrides?: CallOverrides): Promise<void>;

    setBroker(val: string, overrides?: CallOverrides): Promise<void>;

    setDistributor(val: string, overrides?: CallOverrides): Promise<void>;

    setFurnace(val: string, overrides?: CallOverrides): Promise<void>;

    setOneshotPauseDuration(
      oneshotPauseDuration_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOneshotPauser(
      oneshotPauser_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRSRTrader(val: string, overrides?: CallOverrides): Promise<void>;

    setRToken(val: string, overrides?: CallOverrides): Promise<void>;

    setRTokenTrader(val: string, overrides?: CallOverrides): Promise<void>;

    setStRSR(val: string, overrides?: CallOverrides): Promise<void>;

    stRSR(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    unpauseAt(overrides?: CallOverrides): Promise<number>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "AssetRegistrySet(address,address)"(
      oldVal?: string | null,
      newVal?: string | null
    ): AssetRegistrySetEventFilter;
    AssetRegistrySet(
      oldVal?: string | null,
      newVal?: string | null
    ): AssetRegistrySetEventFilter;

    "BackingManagerSet(address,address)"(
      oldVal?: string | null,
      newVal?: string | null
    ): BackingManagerSetEventFilter;
    BackingManagerSet(
      oldVal?: string | null,
      newVal?: string | null
    ): BackingManagerSetEventFilter;

    "BasketHandlerSet(address,address)"(
      oldVal?: string | null,
      newVal?: string | null
    ): BasketHandlerSetEventFilter;
    BasketHandlerSet(
      oldVal?: string | null,
      newVal?: string | null
    ): BasketHandlerSetEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "BrokerSet(address,address)"(
      oldVal?: string | null,
      newVal?: string | null
    ): BrokerSetEventFilter;
    BrokerSet(
      oldVal?: string | null,
      newVal?: string | null
    ): BrokerSetEventFilter;

    "DistributorSet(address,address)"(
      oldVal?: string | null,
      newVal?: string | null
    ): DistributorSetEventFilter;
    DistributorSet(
      oldVal?: string | null,
      newVal?: string | null
    ): DistributorSetEventFilter;

    "FurnaceSet(address,address)"(
      oldVal?: string | null,
      newVal?: string | null
    ): FurnaceSetEventFilter;
    FurnaceSet(
      oldVal?: string | null,
      newVal?: string | null
    ): FurnaceSetEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MainInitialized()"(): MainInitializedEventFilter;
    MainInitialized(): MainInitializedEventFilter;

    "OneshotPauseDurationSet(uint32,uint32)"(
      oldDuration?: null,
      newDuration?: null
    ): OneshotPauseDurationSetEventFilter;
    OneshotPauseDurationSet(
      oldDuration?: null,
      newDuration?: null
    ): OneshotPauseDurationSetEventFilter;

    "OneshotPauserSet(address,address)"(
      oldPauser?: null,
      newPauser?: null
    ): OneshotPauserSetEventFilter;
    OneshotPauserSet(
      oldPauser?: null,
      newPauser?: null
    ): OneshotPauserSetEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RSRTraderSet(address,address)"(
      oldVal?: string | null,
      newVal?: string | null
    ): RSRTraderSetEventFilter;
    RSRTraderSet(
      oldVal?: string | null,
      newVal?: string | null
    ): RSRTraderSetEventFilter;

    "RTokenSet(address,address)"(
      oldVal?: string | null,
      newVal?: string | null
    ): RTokenSetEventFilter;
    RTokenSet(
      oldVal?: string | null,
      newVal?: string | null
    ): RTokenSetEventFilter;

    "RTokenTraderSet(address,address)"(
      oldVal?: string | null,
      newVal?: string | null
    ): RTokenTraderSetEventFilter;
    RTokenTraderSet(
      oldVal?: string | null,
      newVal?: string | null
    ): RTokenTraderSetEventFilter;

    "StRSRSet(address,address)"(
      oldVal?: string | null,
      newVal?: string | null
    ): StRSRSetEventFilter;
    StRSRSet(
      oldVal?: string | null,
      newVal?: string | null
    ): StRSRSetEventFilter;

    "UnpauseAtSet(uint32,uint32)"(
      oldUnpauseAt?: null,
      newUnpauseAt?: null
    ): UnpauseAtSetEventFilter;
    UnpauseAtSet(
      oldUnpauseAt?: null,
      newUnpauseAt?: null
    ): UnpauseAtSetEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    assetRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    backingManager(overrides?: CallOverrides): Promise<BigNumber>;

    basketHandler(overrides?: CallOverrides): Promise<BigNumber>;

    broker(overrides?: CallOverrides): Promise<BigNumber>;

    distributor(overrides?: CallOverrides): Promise<BigNumber>;

    furnace(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      components: ComponentsStruct,
      rsr_: string,
      oneshotPauseDuration_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isComponent(
      componentAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oneshotPauseDuration(overrides?: CallOverrides): Promise<BigNumber>;

    oneshotPauser(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    poke(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    rToken(overrides?: CallOverrides): Promise<BigNumber>;

    rTokenTrader(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renouncePausership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rsr(overrides?: CallOverrides): Promise<BigNumber>;

    rsrTrader(overrides?: CallOverrides): Promise<BigNumber>;

    setAssetRegistry(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBackingManager(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBasketHandler(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBroker(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDistributor(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFurnace(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOneshotPauseDuration(
      oneshotPauseDuration_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOneshotPauser(
      oneshotPauser_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRSRTrader(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRToken(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRTokenTrader(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStRSR(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stRSR(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpauseAt(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assetRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    backingManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    basketHandler(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    broker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    furnace(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      components: ComponentsStruct,
      rsr_: string,
      oneshotPauseDuration_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isComponent(
      componentAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oneshotPauseDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oneshotPauser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poke(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rTokenTrader(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renouncePausership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rsr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rsrTrader(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAssetRegistry(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBackingManager(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBasketHandler(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBroker(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDistributor(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFurnace(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOneshotPauseDuration(
      oneshotPauseDuration_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOneshotPauser(
      oneshotPauser_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRSRTrader(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRToken(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRTokenTrader(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStRSR(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stRSR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpauseAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

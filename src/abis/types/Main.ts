/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type RevenueShareStruct = {
  rTokenDist: BigNumberish;
  rsrDist: BigNumberish;
};

export type RevenueShareStructOutput = [number, number] & {
  rTokenDist: number;
  rsrDist: number;
};

export type DeploymentParamsStruct = {
  maxAuctionSize: BigNumberish;
  dist: RevenueShareStruct;
  rewardPeriod: BigNumberish;
  rewardRatio: BigNumberish;
  unstakingDelay: BigNumberish;
  tradingDelay: BigNumberish;
  auctionLength: BigNumberish;
  backingBuffer: BigNumberish;
  maxTradeSlippage: BigNumberish;
  dustAmount: BigNumberish;
  issuanceRate: BigNumberish;
};

export type DeploymentParamsStructOutput = [
  BigNumber,
  RevenueShareStructOutput,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  maxAuctionSize: BigNumber;
  dist: RevenueShareStructOutput;
  rewardPeriod: BigNumber;
  rewardRatio: BigNumber;
  unstakingDelay: BigNumber;
  tradingDelay: BigNumber;
  auctionLength: BigNumber;
  backingBuffer: BigNumber;
  maxTradeSlippage: BigNumber;
  dustAmount: BigNumber;
  issuanceRate: BigNumber;
};

export type ComponentsStruct = {
  rToken: string;
  stRSR: string;
  assetRegistry: string;
  basketHandler: string;
  backingManager: string;
  distributor: string;
  furnace: string;
  broker: string;
  rsrTrader: string;
  rTokenTrader: string;
};

export type ComponentsStructOutput = [
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string
] & {
  rToken: string;
  stRSR: string;
  assetRegistry: string;
  basketHandler: string;
  backingManager: string;
  distributor: string;
  furnace: string;
  broker: string;
  rsrTrader: string;
  rTokenTrader: string;
};

export type ConstructorArgsStruct = {
  params: DeploymentParamsStruct;
  components: ComponentsStruct;
  rsr: string;
  gnosis: string;
  assets: string[];
};

export type ConstructorArgsStructOutput = [
  DeploymentParamsStructOutput,
  ComponentsStructOutput,
  string,
  string,
  string[]
] & {
  params: DeploymentParamsStructOutput;
  components: ComponentsStructOutput;
  rsr: string;
  gnosis: string;
  assets: string[];
};

export interface MainInterface extends utils.Interface {
  functions: {
    "assetRegistry()": FunctionFragment;
    "backingManager()": FunctionFragment;
    "basketHandler()": FunctionFragment;
    "broker()": FunctionFragment;
    "distributor()": FunctionFragment;
    "furnace()": FunctionFragment;
    "init(((int192,(uint16,uint16),uint256,int192,uint256,uint256,uint256,int192,int192,int192,int192),(address,address,address,address,address,address,address,address,address,address),address,address,address[]))": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pauser()": FunctionFragment;
    "poke()": FunctionFragment;
    "rToken()": FunctionFragment;
    "rTokenTrader()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rsr()": FunctionFragment;
    "rsrTrader()": FunctionFragment;
    "setAssetRegistry(address)": FunctionFragment;
    "setBackingManager(address)": FunctionFragment;
    "setBasketHandler(address)": FunctionFragment;
    "setBroker(address)": FunctionFragment;
    "setDistributor(address)": FunctionFragment;
    "setFurnace(address)": FunctionFragment;
    "setPauser(address)": FunctionFragment;
    "setRSR(address)": FunctionFragment;
    "setRSRTrader(address)": FunctionFragment;
    "setRToken(address)": FunctionFragment;
    "setRTokenTrader(address)": FunctionFragment;
    "setStRSR(address)": FunctionFragment;
    "stRSR()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "assetRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "backingManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "basketHandler",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "broker", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "distributor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "furnace", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [ConstructorArgsStruct]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pauser", values?: undefined): string;
  encodeFunctionData(functionFragment: "poke", values?: undefined): string;
  encodeFunctionData(functionFragment: "rToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rTokenTrader",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rsr", values?: undefined): string;
  encodeFunctionData(functionFragment: "rsrTrader", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAssetRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBackingManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBasketHandler",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setBroker", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setDistributor",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setFurnace", values: [string]): string;
  encodeFunctionData(functionFragment: "setPauser", values: [string]): string;
  encodeFunctionData(functionFragment: "setRSR", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setRSRTrader",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setRToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setRTokenTrader",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setStRSR", values: [string]): string;
  encodeFunctionData(functionFragment: "stRSR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "assetRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "backingManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "basketHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "broker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "furnace", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poke", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rTokenTrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rsr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rsrTrader", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAssetRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBackingManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBasketHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBroker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFurnace", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPauser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRSR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRSRTrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRTokenTrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStRSR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stRSR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "AssetRegistrySet(address,address)": EventFragment;
    "BackingManagerSet(address,address)": EventFragment;
    "BasketHandlerSet(address,address)": EventFragment;
    "BrokerSet(address,address)": EventFragment;
    "DistributorSet(address,address)": EventFragment;
    "FurnaceSet(address,address)": EventFragment;
    "Initialized()": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PausedSet(bool,bool)": EventFragment;
    "PauserSet(address,address)": EventFragment;
    "RSRSet(address,address)": EventFragment;
    "RSRTraderSet(address,address)": EventFragment;
    "RTokenSet(address,address)": EventFragment;
    "RTokenTraderSet(address,address)": EventFragment;
    "StRSRSet(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetRegistrySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BackingManagerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BasketHandlerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BrokerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributorSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FurnaceSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PausedSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauserSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RSRSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RSRTraderSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RTokenSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RTokenTraderSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StRSRSet"): EventFragment;
}

export type AssetRegistrySetEvent = TypedEvent<
  [string, string],
  { oldVal: string; newVal: string }
>;

export type AssetRegistrySetEventFilter =
  TypedEventFilter<AssetRegistrySetEvent>;

export type BackingManagerSetEvent = TypedEvent<
  [string, string],
  { oldVal: string; newVal: string }
>;

export type BackingManagerSetEventFilter =
  TypedEventFilter<BackingManagerSetEvent>;

export type BasketHandlerSetEvent = TypedEvent<
  [string, string],
  { oldVal: string; newVal: string }
>;

export type BasketHandlerSetEventFilter =
  TypedEventFilter<BasketHandlerSetEvent>;

export type BrokerSetEvent = TypedEvent<
  [string, string],
  { oldVal: string; newVal: string }
>;

export type BrokerSetEventFilter = TypedEventFilter<BrokerSetEvent>;

export type DistributorSetEvent = TypedEvent<
  [string, string],
  { oldVal: string; newVal: string }
>;

export type DistributorSetEventFilter = TypedEventFilter<DistributorSetEvent>;

export type FurnaceSetEvent = TypedEvent<
  [string, string],
  { oldVal: string; newVal: string }
>;

export type FurnaceSetEventFilter = TypedEventFilter<FurnaceSetEvent>;

export type InitializedEvent = TypedEvent<[], {}>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedSetEvent = TypedEvent<
  [boolean, boolean],
  { oldPaused: boolean; newPaused: boolean }
>;

export type PausedSetEventFilter = TypedEventFilter<PausedSetEvent>;

export type PauserSetEvent = TypedEvent<
  [string, string],
  { oldPauser: string; newPauser: string }
>;

export type PauserSetEventFilter = TypedEventFilter<PauserSetEvent>;

export type RSRSetEvent = TypedEvent<
  [string, string],
  { oldVal: string; newVal: string }
>;

export type RSRSetEventFilter = TypedEventFilter<RSRSetEvent>;

export type RSRTraderSetEvent = TypedEvent<
  [string, string],
  { oldVal: string; newVal: string }
>;

export type RSRTraderSetEventFilter = TypedEventFilter<RSRTraderSetEvent>;

export type RTokenSetEvent = TypedEvent<
  [string, string],
  { oldVal: string; newVal: string }
>;

export type RTokenSetEventFilter = TypedEventFilter<RTokenSetEvent>;

export type RTokenTraderSetEvent = TypedEvent<
  [string, string],
  { oldVal: string; newVal: string }
>;

export type RTokenTraderSetEventFilter = TypedEventFilter<RTokenTraderSetEvent>;

export type StRSRSetEvent = TypedEvent<
  [string, string],
  { oldVal: string; newVal: string }
>;

export type StRSRSetEventFilter = TypedEventFilter<StRSRSetEvent>;

export interface Main extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MainInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    assetRegistry(overrides?: CallOverrides): Promise<[string]>;

    backingManager(overrides?: CallOverrides): Promise<[string]>;

    basketHandler(overrides?: CallOverrides): Promise<[string]>;

    broker(overrides?: CallOverrides): Promise<[string]>;

    distributor(overrides?: CallOverrides): Promise<[string]>;

    furnace(overrides?: CallOverrides): Promise<[string]>;

    init(
      args: ConstructorArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pauser(overrides?: CallOverrides): Promise<[string]>;

    poke(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rToken(overrides?: CallOverrides): Promise<[string]>;

    rTokenTrader(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rsr(overrides?: CallOverrides): Promise<[string]>;

    rsrTrader(overrides?: CallOverrides): Promise<[string]>;

    setAssetRegistry(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBackingManager(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBasketHandler(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBroker(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDistributor(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFurnace(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPauser(
      pauser_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRSR(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRSRTrader(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRToken(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRTokenTrader(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStRSR(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stRSR(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  assetRegistry(overrides?: CallOverrides): Promise<string>;

  backingManager(overrides?: CallOverrides): Promise<string>;

  basketHandler(overrides?: CallOverrides): Promise<string>;

  broker(overrides?: CallOverrides): Promise<string>;

  distributor(overrides?: CallOverrides): Promise<string>;

  furnace(overrides?: CallOverrides): Promise<string>;

  init(
    args: ConstructorArgsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pauser(overrides?: CallOverrides): Promise<string>;

  poke(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rToken(overrides?: CallOverrides): Promise<string>;

  rTokenTrader(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rsr(overrides?: CallOverrides): Promise<string>;

  rsrTrader(overrides?: CallOverrides): Promise<string>;

  setAssetRegistry(
    val: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBackingManager(
    val: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBasketHandler(
    val: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBroker(
    val: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDistributor(
    val: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFurnace(
    val: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPauser(
    pauser_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRSR(
    val: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRSRTrader(
    val: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRToken(
    val: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRTokenTrader(
    val: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStRSR(
    val: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stRSR(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    assetRegistry(overrides?: CallOverrides): Promise<string>;

    backingManager(overrides?: CallOverrides): Promise<string>;

    basketHandler(overrides?: CallOverrides): Promise<string>;

    broker(overrides?: CallOverrides): Promise<string>;

    distributor(overrides?: CallOverrides): Promise<string>;

    furnace(overrides?: CallOverrides): Promise<string>;

    init(args: ConstructorArgsStruct, overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pauser(overrides?: CallOverrides): Promise<string>;

    poke(overrides?: CallOverrides): Promise<void>;

    rToken(overrides?: CallOverrides): Promise<string>;

    rTokenTrader(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rsr(overrides?: CallOverrides): Promise<string>;

    rsrTrader(overrides?: CallOverrides): Promise<string>;

    setAssetRegistry(val: string, overrides?: CallOverrides): Promise<void>;

    setBackingManager(val: string, overrides?: CallOverrides): Promise<void>;

    setBasketHandler(val: string, overrides?: CallOverrides): Promise<void>;

    setBroker(val: string, overrides?: CallOverrides): Promise<void>;

    setDistributor(val: string, overrides?: CallOverrides): Promise<void>;

    setFurnace(val: string, overrides?: CallOverrides): Promise<void>;

    setPauser(pauser_: string, overrides?: CallOverrides): Promise<void>;

    setRSR(val: string, overrides?: CallOverrides): Promise<void>;

    setRSRTrader(val: string, overrides?: CallOverrides): Promise<void>;

    setRToken(val: string, overrides?: CallOverrides): Promise<void>;

    setRTokenTrader(val: string, overrides?: CallOverrides): Promise<void>;

    setStRSR(val: string, overrides?: CallOverrides): Promise<void>;

    stRSR(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AssetRegistrySet(address,address)"(
      oldVal?: string | null,
      newVal?: string | null
    ): AssetRegistrySetEventFilter;
    AssetRegistrySet(
      oldVal?: string | null,
      newVal?: string | null
    ): AssetRegistrySetEventFilter;

    "BackingManagerSet(address,address)"(
      oldVal?: string | null,
      newVal?: string | null
    ): BackingManagerSetEventFilter;
    BackingManagerSet(
      oldVal?: string | null,
      newVal?: string | null
    ): BackingManagerSetEventFilter;

    "BasketHandlerSet(address,address)"(
      oldVal?: string | null,
      newVal?: string | null
    ): BasketHandlerSetEventFilter;
    BasketHandlerSet(
      oldVal?: string | null,
      newVal?: string | null
    ): BasketHandlerSetEventFilter;

    "BrokerSet(address,address)"(
      oldVal?: string | null,
      newVal?: string | null
    ): BrokerSetEventFilter;
    BrokerSet(
      oldVal?: string | null,
      newVal?: string | null
    ): BrokerSetEventFilter;

    "DistributorSet(address,address)"(
      oldVal?: string | null,
      newVal?: string | null
    ): DistributorSetEventFilter;
    DistributorSet(
      oldVal?: string | null,
      newVal?: string | null
    ): DistributorSetEventFilter;

    "FurnaceSet(address,address)"(
      oldVal?: string | null,
      newVal?: string | null
    ): FurnaceSetEventFilter;
    FurnaceSet(
      oldVal?: string | null,
      newVal?: string | null
    ): FurnaceSetEventFilter;

    "Initialized()"(): InitializedEventFilter;
    Initialized(): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PausedSet(bool,bool)"(
      oldPaused?: null,
      newPaused?: null
    ): PausedSetEventFilter;
    PausedSet(oldPaused?: null, newPaused?: null): PausedSetEventFilter;

    "PauserSet(address,address)"(
      oldPauser?: null,
      newPauser?: null
    ): PauserSetEventFilter;
    PauserSet(oldPauser?: null, newPauser?: null): PauserSetEventFilter;

    "RSRSet(address,address)"(
      oldVal?: string | null,
      newVal?: string | null
    ): RSRSetEventFilter;
    RSRSet(oldVal?: string | null, newVal?: string | null): RSRSetEventFilter;

    "RSRTraderSet(address,address)"(
      oldVal?: string | null,
      newVal?: string | null
    ): RSRTraderSetEventFilter;
    RSRTraderSet(
      oldVal?: string | null,
      newVal?: string | null
    ): RSRTraderSetEventFilter;

    "RTokenSet(address,address)"(
      oldVal?: string | null,
      newVal?: string | null
    ): RTokenSetEventFilter;
    RTokenSet(
      oldVal?: string | null,
      newVal?: string | null
    ): RTokenSetEventFilter;

    "RTokenTraderSet(address,address)"(
      oldVal?: string | null,
      newVal?: string | null
    ): RTokenTraderSetEventFilter;
    RTokenTraderSet(
      oldVal?: string | null,
      newVal?: string | null
    ): RTokenTraderSetEventFilter;

    "StRSRSet(address,address)"(
      oldVal?: string | null,
      newVal?: string | null
    ): StRSRSetEventFilter;
    StRSRSet(
      oldVal?: string | null,
      newVal?: string | null
    ): StRSRSetEventFilter;
  };

  estimateGas: {
    assetRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    backingManager(overrides?: CallOverrides): Promise<BigNumber>;

    basketHandler(overrides?: CallOverrides): Promise<BigNumber>;

    broker(overrides?: CallOverrides): Promise<BigNumber>;

    distributor(overrides?: CallOverrides): Promise<BigNumber>;

    furnace(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      args: ConstructorArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pauser(overrides?: CallOverrides): Promise<BigNumber>;

    poke(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rToken(overrides?: CallOverrides): Promise<BigNumber>;

    rTokenTrader(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rsr(overrides?: CallOverrides): Promise<BigNumber>;

    rsrTrader(overrides?: CallOverrides): Promise<BigNumber>;

    setAssetRegistry(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBackingManager(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBasketHandler(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBroker(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDistributor(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFurnace(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPauser(
      pauser_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRSR(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRSRTrader(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRToken(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRTokenTrader(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStRSR(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stRSR(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assetRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    backingManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    basketHandler(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    broker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    furnace(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      args: ConstructorArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poke(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rTokenTrader(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rsr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rsrTrader(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAssetRegistry(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBackingManager(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBasketHandler(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBroker(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDistributor(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFurnace(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPauser(
      pauser_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRSR(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRSRTrader(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRToken(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRTokenTrader(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStRSR(
      val: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stRSR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

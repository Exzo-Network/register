/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface RTokenInterface extends ethers.utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "SCALE()": FunctionFragment;
    "act()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "basketSize()": FunctionFragment;
    "basketToken(uint16)": FunctionFragment;
    "calculateFee(address,address,uint256)": FunctionFragment;
    "checkpoints(address,uint32)": FunctionFragment;
    "currentMinting()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "delegate(address)": FunctionFragment;
    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "delegates(address)": FunctionFragment;
    "freezeRebalancing()": FunctionFragment;
    "freezer()": FunctionFragment;
    "getPastTotalSupply(uint256)": FunctionFragment;
    "getPastVotes(address,uint256)": FunctionFragment;
    "getVotes(address)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize(string,string,tuple,tuple[],tuple)": FunctionFragment;
    "insurancePool()": FunctionFragment;
    "issue(uint256)": FunctionFragment;
    "issueAmounts(uint256)": FunctionFragment;
    "mintings(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "numCheckpoints(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "rebalancingFrozen()": FunctionFragment;
    "redeem(uint256)": FunctionFragment;
    "redemptionAmounts(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rsr()": FunctionFragment;
    "setBasketTokenPriceInRToken(uint16,uint256)": FunctionFragment;
    "setRSRPriceInRToken(uint256)": FunctionFragment;
    "stakingDepositDelay()": FunctionFragment;
    "stakingWithdrawalDelay()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unfreezeRebalancing()": FunctionFragment;
    "updateBasket(tuple[])": FunctionFragment;
    "updateConfig(tuple)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SCALE", values?: undefined): string;
  encodeFunctionData(functionFragment: "act", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "basketSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "basketToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateFee",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkpoints",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentMinting",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "delegate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "delegateBySig",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "delegates", values: [string]): string;
  encodeFunctionData(
    functionFragment: "freezeRebalancing",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "freezer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPastTotalSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPastVotes",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getVotes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      {
        stakingDepositDelay: BigNumberish;
        stakingWithdrawalDelay: BigNumberish;
        maxSupply: BigNumberish;
        minMintingSize: BigNumberish;
        issuanceRate: BigNumberish;
        rebalancingFreezeCost: BigNumberish;
        insurancePaymentPeriod: BigNumberish;
        expansionPerSecond: BigNumberish;
        expenditureFactor: BigNumberish;
        spread: BigNumberish;
        exchange: string;
        circuitBreaker: string;
        txFeeCalculator: string;
        insurancePool: string;
        protocolFund: string;
      },
      {
        tokenAddress: string;
        genesisQuantity: BigNumberish;
        rateLimit: BigNumberish;
        maxTrade: BigNumberish;
        priceInRToken: BigNumberish;
        slippageTolerance: BigNumberish;
      }[],
      {
        tokenAddress: string;
        genesisQuantity: BigNumberish;
        rateLimit: BigNumberish;
        maxTrade: BigNumberish;
        priceInRToken: BigNumberish;
        slippageTolerance: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "insurancePool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "issue", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "issueAmounts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(
    functionFragment: "numCheckpoints",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalancingFrozen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redemptionAmounts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rsr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBasketTokenPriceInRToken",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRSRPriceInRToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingDepositDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingWithdrawalDelay",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unfreezeRebalancing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateBasket",
    values: [
      {
        tokenAddress: string;
        genesisQuantity: BigNumberish;
        rateLimit: BigNumberish;
        maxTrade: BigNumberish;
        priceInRToken: BigNumberish;
        slippageTolerance: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateConfig",
    values: [
      {
        stakingDepositDelay: BigNumberish;
        stakingWithdrawalDelay: BigNumberish;
        maxSupply: BigNumberish;
        minMintingSize: BigNumberish;
        issuanceRate: BigNumberish;
        rebalancingFreezeCost: BigNumberish;
        insurancePaymentPeriod: BigNumberish;
        expansionPerSecond: BigNumberish;
        expenditureFactor: BigNumberish;
        spread: BigNumberish;
        exchange: string;
        circuitBreaker: string;
        txFeeCalculator: string;
        insurancePool: string;
        protocolFund: string;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SCALE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "act", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "basketSize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "basketToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentMinting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "freezeRebalancing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "freezer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPastTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPastVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "insurancePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "issueAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numCheckpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rebalancingFrozen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redemptionAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rsr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBasketTokenPriceInRToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRSRPriceInRToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingDepositDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingWithdrawalDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unfreezeRebalancing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBasket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "BasketUpdated(uint16,uint16)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "ConfigUpdated()": EventFragment;
    "DelegateChanged(address,address,address)": EventFragment;
    "DelegateVotesChanged(address,uint256,uint256)": EventFragment;
    "MaxSupplyExceeded()": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RebalancingFrozen(address)": EventFragment;
    "RebalancingUnfrozen(address)": EventFragment;
    "Redemption(address,uint256)": EventFragment;
    "SlowMintingComplete(address,uint256)": EventFragment;
    "SlowMintingInitiated(address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BasketUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConfigUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegateVotesChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxSupplyExceeded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RebalancingFrozen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RebalancingUnfrozen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redemption"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SlowMintingComplete"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SlowMintingInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export class RToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RTokenInterface;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    SCALE(overrides?: CallOverrides): Promise<[BigNumber]>;

    act(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    basketSize(overrides?: CallOverrides): Promise<[number]>;

    basketToken(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          tokenAddress: string;
          genesisQuantity: BigNumber;
          rateLimit: BigNumber;
          maxTrade: BigNumber;
          priceInRToken: BigNumber;
          slippageTolerance: BigNumber;
        }
      ]
    >;

    calculateFee(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    checkpoints(
      account: string,
      pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[number, BigNumber] & { fromBlock: number; votes: BigNumber }]>;

    currentMinting(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegate(
      delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegates(account: string, overrides?: CallOverrides): Promise<[string]>;

    freezeRebalancing(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    freezer(overrides?: CallOverrides): Promise<[string]>;

    getPastTotalSupply(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPastVotes(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVotes(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      name_: string,
      symbol_: string,
      config_: {
        stakingDepositDelay: BigNumberish;
        stakingWithdrawalDelay: BigNumberish;
        maxSupply: BigNumberish;
        minMintingSize: BigNumberish;
        issuanceRate: BigNumberish;
        rebalancingFreezeCost: BigNumberish;
        insurancePaymentPeriod: BigNumberish;
        expansionPerSecond: BigNumberish;
        expenditureFactor: BigNumberish;
        spread: BigNumberish;
        exchange: string;
        circuitBreaker: string;
        txFeeCalculator: string;
        insurancePool: string;
        protocolFund: string;
      },
      basketTokens_: {
        tokenAddress: string;
        genesisQuantity: BigNumberish;
        rateLimit: BigNumberish;
        maxTrade: BigNumberish;
        priceInRToken: BigNumberish;
        slippageTolerance: BigNumberish;
      }[],
      rsrToken_: {
        tokenAddress: string;
        genesisQuantity: BigNumberish;
        rateLimit: BigNumberish;
        maxTrade: BigNumberish;
        priceInRToken: BigNumberish;
        slippageTolerance: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    insurancePool(overrides?: CallOverrides): Promise<[string]>;

    issue(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    issueAmounts(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { amounts: BigNumber[] }>;

    mintings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { amount: BigNumber; account: string }>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    numCheckpoints(
      account: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rebalancingFrozen(overrides?: CallOverrides): Promise<[boolean]>;

    redeem(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redemptionAmounts(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { amounts: BigNumber[] }>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rsr(
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          tokenAddress: string;
          genesisQuantity: BigNumber;
          rateLimit: BigNumber;
          maxTrade: BigNumber;
          priceInRToken: BigNumber;
          slippageTolerance: BigNumber;
        }
      ]
    >;

    setBasketTokenPriceInRToken(
      i: BigNumberish,
      priceInRToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRSRPriceInRToken(
      priceInRToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakingDepositDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakingWithdrawalDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unfreezeRebalancing(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateBasket(
      newTokens: {
        tokenAddress: string;
        genesisQuantity: BigNumberish;
        rateLimit: BigNumberish;
        maxTrade: BigNumberish;
        priceInRToken: BigNumberish;
        slippageTolerance: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateConfig(
      newConfig: {
        stakingDepositDelay: BigNumberish;
        stakingWithdrawalDelay: BigNumberish;
        maxSupply: BigNumberish;
        minMintingSize: BigNumberish;
        issuanceRate: BigNumberish;
        rebalancingFreezeCost: BigNumberish;
        insurancePaymentPeriod: BigNumberish;
        expansionPerSecond: BigNumberish;
        expenditureFactor: BigNumberish;
        spread: BigNumberish;
        exchange: string;
        circuitBreaker: string;
        txFeeCalculator: string;
        insurancePool: string;
        protocolFund: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  SCALE(overrides?: CallOverrides): Promise<BigNumber>;

  act(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  basketSize(overrides?: CallOverrides): Promise<number>;

  basketToken(
    i: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      tokenAddress: string;
      genesisQuantity: BigNumber;
      rateLimit: BigNumber;
      maxTrade: BigNumber;
      priceInRToken: BigNumber;
      slippageTolerance: BigNumber;
    }
  >;

  calculateFee(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkpoints(
    account: string,
    pos: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber] & { fromBlock: number; votes: BigNumber }>;

  currentMinting(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegate(
    delegatee: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegateBySig(
    delegatee: string,
    nonce: BigNumberish,
    expiry: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegates(account: string, overrides?: CallOverrides): Promise<string>;

  freezeRebalancing(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  freezer(overrides?: CallOverrides): Promise<string>;

  getPastTotalSupply(
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPastVotes(
    account: string,
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    name_: string,
    symbol_: string,
    config_: {
      stakingDepositDelay: BigNumberish;
      stakingWithdrawalDelay: BigNumberish;
      maxSupply: BigNumberish;
      minMintingSize: BigNumberish;
      issuanceRate: BigNumberish;
      rebalancingFreezeCost: BigNumberish;
      insurancePaymentPeriod: BigNumberish;
      expansionPerSecond: BigNumberish;
      expenditureFactor: BigNumberish;
      spread: BigNumberish;
      exchange: string;
      circuitBreaker: string;
      txFeeCalculator: string;
      insurancePool: string;
      protocolFund: string;
    },
    basketTokens_: {
      tokenAddress: string;
      genesisQuantity: BigNumberish;
      rateLimit: BigNumberish;
      maxTrade: BigNumberish;
      priceInRToken: BigNumberish;
      slippageTolerance: BigNumberish;
    }[],
    rsrToken_: {
      tokenAddress: string;
      genesisQuantity: BigNumberish;
      rateLimit: BigNumberish;
      maxTrade: BigNumberish;
      priceInRToken: BigNumberish;
      slippageTolerance: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  insurancePool(overrides?: CallOverrides): Promise<string>;

  issue(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  issueAmounts(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  mintings(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { amount: BigNumber; account: string }>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  numCheckpoints(account: string, overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  permit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rebalancingFrozen(overrides?: CallOverrides): Promise<boolean>;

  redeem(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redemptionAmounts(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rsr(
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      tokenAddress: string;
      genesisQuantity: BigNumber;
      rateLimit: BigNumber;
      maxTrade: BigNumber;
      priceInRToken: BigNumber;
      slippageTolerance: BigNumber;
    }
  >;

  setBasketTokenPriceInRToken(
    i: BigNumberish,
    priceInRToken: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRSRPriceInRToken(
    priceInRToken: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakingDepositDelay(overrides?: CallOverrides): Promise<BigNumber>;

  stakingWithdrawalDelay(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unfreezeRebalancing(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateBasket(
    newTokens: {
      tokenAddress: string;
      genesisQuantity: BigNumberish;
      rateLimit: BigNumberish;
      maxTrade: BigNumberish;
      priceInRToken: BigNumberish;
      slippageTolerance: BigNumberish;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateConfig(
    newConfig: {
      stakingDepositDelay: BigNumberish;
      stakingWithdrawalDelay: BigNumberish;
      maxSupply: BigNumberish;
      minMintingSize: BigNumberish;
      issuanceRate: BigNumberish;
      rebalancingFreezeCost: BigNumberish;
      insurancePaymentPeriod: BigNumberish;
      expansionPerSecond: BigNumberish;
      expenditureFactor: BigNumberish;
      spread: BigNumberish;
      exchange: string;
      circuitBreaker: string;
      txFeeCalculator: string;
      insurancePool: string;
      protocolFund: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    SCALE(overrides?: CallOverrides): Promise<BigNumber>;

    act(overrides?: CallOverrides): Promise<void>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    basketSize(overrides?: CallOverrides): Promise<number>;

    basketToken(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        tokenAddress: string;
        genesisQuantity: BigNumber;
        rateLimit: BigNumber;
        maxTrade: BigNumber;
        priceInRToken: BigNumber;
        slippageTolerance: BigNumber;
      }
    >;

    calculateFee(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkpoints(
      account: string,
      pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { fromBlock: number; votes: BigNumber }>;

    currentMinting(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    delegate(delegatee: string, overrides?: CallOverrides): Promise<void>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    delegates(account: string, overrides?: CallOverrides): Promise<string>;

    freezeRebalancing(overrides?: CallOverrides): Promise<void>;

    freezer(overrides?: CallOverrides): Promise<string>;

    getPastTotalSupply(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPastVotes(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      name_: string,
      symbol_: string,
      config_: {
        stakingDepositDelay: BigNumberish;
        stakingWithdrawalDelay: BigNumberish;
        maxSupply: BigNumberish;
        minMintingSize: BigNumberish;
        issuanceRate: BigNumberish;
        rebalancingFreezeCost: BigNumberish;
        insurancePaymentPeriod: BigNumberish;
        expansionPerSecond: BigNumberish;
        expenditureFactor: BigNumberish;
        spread: BigNumberish;
        exchange: string;
        circuitBreaker: string;
        txFeeCalculator: string;
        insurancePool: string;
        protocolFund: string;
      },
      basketTokens_: {
        tokenAddress: string;
        genesisQuantity: BigNumberish;
        rateLimit: BigNumberish;
        maxTrade: BigNumberish;
        priceInRToken: BigNumberish;
        slippageTolerance: BigNumberish;
      }[],
      rsrToken_: {
        tokenAddress: string;
        genesisQuantity: BigNumberish;
        rateLimit: BigNumberish;
        maxTrade: BigNumberish;
        priceInRToken: BigNumberish;
        slippageTolerance: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    insurancePool(overrides?: CallOverrides): Promise<string>;

    issue(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    issueAmounts(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    mintings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { amount: BigNumber; account: string }>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    numCheckpoints(account: string, overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    rebalancingFrozen(overrides?: CallOverrides): Promise<boolean>;

    redeem(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    redemptionAmounts(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rsr(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        tokenAddress: string;
        genesisQuantity: BigNumber;
        rateLimit: BigNumber;
        maxTrade: BigNumber;
        priceInRToken: BigNumber;
        slippageTolerance: BigNumber;
      }
    >;

    setBasketTokenPriceInRToken(
      i: BigNumberish,
      priceInRToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRSRPriceInRToken(
      priceInRToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakingDepositDelay(overrides?: CallOverrides): Promise<BigNumber>;

    stakingWithdrawalDelay(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unfreezeRebalancing(overrides?: CallOverrides): Promise<void>;

    updateBasket(
      newTokens: {
        tokenAddress: string;
        genesisQuantity: BigNumberish;
        rateLimit: BigNumberish;
        maxTrade: BigNumberish;
        priceInRToken: BigNumberish;
        slippageTolerance: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateConfig(
      newConfig: {
        stakingDepositDelay: BigNumberish;
        stakingWithdrawalDelay: BigNumberish;
        maxSupply: BigNumberish;
        minMintingSize: BigNumberish;
        issuanceRate: BigNumberish;
        rebalancingFreezeCost: BigNumberish;
        insurancePaymentPeriod: BigNumberish;
        expansionPerSecond: BigNumberish;
        expenditureFactor: BigNumberish;
        spread: BigNumberish;
        exchange: string;
        circuitBreaker: string;
        txFeeCalculator: string;
        insurancePool: string;
        protocolFund: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    BasketUpdated(
      oldSize?: null,
      newSize?: null
    ): TypedEventFilter<[number, number], { oldSize: number; newSize: number }>;

    BeaconUpgraded(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    ConfigUpdated(): TypedEventFilter<[], {}>;

    DelegateChanged(
      delegator?: string | null,
      fromDelegate?: string | null,
      toDelegate?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { delegator: string; fromDelegate: string; toDelegate: string }
    >;

    DelegateVotesChanged(
      delegate?: string | null,
      previousBalance?: null,
      newBalance?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { delegate: string; previousBalance: BigNumber; newBalance: BigNumber }
    >;

    MaxSupplyExceeded(): TypedEventFilter<[], {}>;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    RebalancingFrozen(
      account?: string | null
    ): TypedEventFilter<[string], { account: string }>;

    RebalancingUnfrozen(
      account?: string | null
    ): TypedEventFilter<[string], { account: string }>;

    Redemption(
      redeemer?: string | null,
      amount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { redeemer: string; amount: BigNumber }
    >;

    SlowMintingComplete(
      account?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    SlowMintingInitiated(
      account?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    Upgraded(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    SCALE(overrides?: CallOverrides): Promise<BigNumber>;

    act(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    basketSize(overrides?: CallOverrides): Promise<BigNumber>;

    basketToken(i: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    calculateFee(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkpoints(
      account: string,
      pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentMinting(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegate(
      delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegates(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    freezeRebalancing(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    freezer(overrides?: CallOverrides): Promise<BigNumber>;

    getPastTotalSupply(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPastVotes(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      name_: string,
      symbol_: string,
      config_: {
        stakingDepositDelay: BigNumberish;
        stakingWithdrawalDelay: BigNumberish;
        maxSupply: BigNumberish;
        minMintingSize: BigNumberish;
        issuanceRate: BigNumberish;
        rebalancingFreezeCost: BigNumberish;
        insurancePaymentPeriod: BigNumberish;
        expansionPerSecond: BigNumberish;
        expenditureFactor: BigNumberish;
        spread: BigNumberish;
        exchange: string;
        circuitBreaker: string;
        txFeeCalculator: string;
        insurancePool: string;
        protocolFund: string;
      },
      basketTokens_: {
        tokenAddress: string;
        genesisQuantity: BigNumberish;
        rateLimit: BigNumberish;
        maxTrade: BigNumberish;
        priceInRToken: BigNumberish;
        slippageTolerance: BigNumberish;
      }[],
      rsrToken_: {
        tokenAddress: string;
        genesisQuantity: BigNumberish;
        rateLimit: BigNumberish;
        maxTrade: BigNumberish;
        priceInRToken: BigNumberish;
        slippageTolerance: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    insurancePool(overrides?: CallOverrides): Promise<BigNumber>;

    issue(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    issueAmounts(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintings(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    numCheckpoints(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rebalancingFrozen(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redemptionAmounts(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rsr(overrides?: CallOverrides): Promise<BigNumber>;

    setBasketTokenPriceInRToken(
      i: BigNumberish,
      priceInRToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRSRPriceInRToken(
      priceInRToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakingDepositDelay(overrides?: CallOverrides): Promise<BigNumber>;

    stakingWithdrawalDelay(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unfreezeRebalancing(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateBasket(
      newTokens: {
        tokenAddress: string;
        genesisQuantity: BigNumberish;
        rateLimit: BigNumberish;
        maxTrade: BigNumberish;
        priceInRToken: BigNumberish;
        slippageTolerance: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateConfig(
      newConfig: {
        stakingDepositDelay: BigNumberish;
        stakingWithdrawalDelay: BigNumberish;
        maxSupply: BigNumberish;
        minMintingSize: BigNumberish;
        issuanceRate: BigNumberish;
        rebalancingFreezeCost: BigNumberish;
        insurancePaymentPeriod: BigNumberish;
        expansionPerSecond: BigNumberish;
        expenditureFactor: BigNumberish;
        spread: BigNumberish;
        exchange: string;
        circuitBreaker: string;
        txFeeCalculator: string;
        insurancePool: string;
        protocolFund: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SCALE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    act(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    basketSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    basketToken(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateFee(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkpoints(
      account: string,
      pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentMinting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegate(
      delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegates(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    freezeRebalancing(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    freezer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPastTotalSupply(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPastVotes(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotes(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      name_: string,
      symbol_: string,
      config_: {
        stakingDepositDelay: BigNumberish;
        stakingWithdrawalDelay: BigNumberish;
        maxSupply: BigNumberish;
        minMintingSize: BigNumberish;
        issuanceRate: BigNumberish;
        rebalancingFreezeCost: BigNumberish;
        insurancePaymentPeriod: BigNumberish;
        expansionPerSecond: BigNumberish;
        expenditureFactor: BigNumberish;
        spread: BigNumberish;
        exchange: string;
        circuitBreaker: string;
        txFeeCalculator: string;
        insurancePool: string;
        protocolFund: string;
      },
      basketTokens_: {
        tokenAddress: string;
        genesisQuantity: BigNumberish;
        rateLimit: BigNumberish;
        maxTrade: BigNumberish;
        priceInRToken: BigNumberish;
        slippageTolerance: BigNumberish;
      }[],
      rsrToken_: {
        tokenAddress: string;
        genesisQuantity: BigNumberish;
        rateLimit: BigNumberish;
        maxTrade: BigNumberish;
        priceInRToken: BigNumberish;
        slippageTolerance: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    insurancePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    issue(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    issueAmounts(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numCheckpoints(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rebalancingFrozen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redemptionAmounts(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rsr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBasketTokenPriceInRToken(
      i: BigNumberish,
      priceInRToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRSRPriceInRToken(
      priceInRToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakingDepositDelay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingWithdrawalDelay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unfreezeRebalancing(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateBasket(
      newTokens: {
        tokenAddress: string;
        genesisQuantity: BigNumberish;
        rateLimit: BigNumberish;
        maxTrade: BigNumberish;
        priceInRToken: BigNumberish;
        slippageTolerance: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateConfig(
      newConfig: {
        stakingDepositDelay: BigNumberish;
        stakingWithdrawalDelay: BigNumberish;
        maxSupply: BigNumberish;
        minMintingSize: BigNumberish;
        issuanceRate: BigNumberish;
        rebalancingFreezeCost: BigNumberish;
        insurancePaymentPeriod: BigNumberish;
        expansionPerSecond: BigNumberish;
        expenditureFactor: BigNumberish;
        spread: BigNumberish;
        exchange: string;
        circuitBreaker: string;
        txFeeCalculator: string;
        insurancePool: string;
        protocolFund: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

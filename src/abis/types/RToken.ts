/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace RTokenP1 {
  export type IssueItemStruct = {
    when: BigNumberish;
    amtRToken: BigNumberish;
    amtBaskets: BigNumberish;
    deposits: BigNumberish[];
  };

  export type IssueItemStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber[]
  ] & {
    when: BigNumber;
    amtRToken: BigNumber;
    amtBaskets: BigNumber;
    deposits: BigNumber[];
  };
}

export interface RTokenInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "MIN_ISS_RATE()": FunctionFragment;
    "allVestAt()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "basketsNeeded()": FunctionFragment;
    "cancel(uint256,bool)": FunctionFragment;
    "claimAndSweepRewards()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "endIdForVest(address)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "init(address,string,string,string,uint192)": FunctionFragment;
    "issuanceRate()": FunctionFragment;
    "issue(uint256)": FunctionFragment;
    "issueItem(address,uint256)": FunctionFragment;
    "issueQueues(address)": FunctionFragment;
    "lastIssRate()": FunctionFragment;
    "lastIssRateBlock()": FunctionFragment;
    "main()": FunctionFragment;
    "manifestoURI()": FunctionFragment;
    "melt(uint256)": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "price()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "redeem(uint256)": FunctionFragment;
    "setBasketsNeeded(uint192)": FunctionFragment;
    "setIssuanceRate(uint192)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "vest(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOMAIN_SEPARATOR"
      | "MIN_ISS_RATE"
      | "allVestAt"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "basketsNeeded"
      | "cancel"
      | "claimAndSweepRewards"
      | "decimals"
      | "decreaseAllowance"
      | "endIdForVest"
      | "increaseAllowance"
      | "init"
      | "issuanceRate"
      | "issue"
      | "issueItem"
      | "issueQueues"
      | "lastIssRate"
      | "lastIssRateBlock"
      | "main"
      | "manifestoURI"
      | "melt"
      | "mint"
      | "name"
      | "nonces"
      | "permit"
      | "price"
      | "proxiableUUID"
      | "redeem"
      | "setBasketsNeeded"
      | "setIssuanceRate"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "vest"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_ISS_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "allVestAt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "basketsNeeded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAndSweepRewards",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endIdForVest",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "issuanceRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "issue", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "issueItem",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "issueQueues", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lastIssRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastIssRateBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "main", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "manifestoURI",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "melt", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBasketsNeeded",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setIssuanceRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vest",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_ISS_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allVestAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "basketsNeeded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimAndSweepRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endIdForVest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "issuanceRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issueItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "issueQueues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastIssRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastIssRateBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "main", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "manifestoURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "melt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBasketsNeeded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIssuanceRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vest", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "BasketsNeededChanged(uint192,uint192)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Issuance(address,uint256,uint192)": EventFragment;
    "IssuanceRateSet(uint192,uint192)": EventFragment;
    "IssuanceStarted(address,uint256,uint256,uint192,address[],uint256[],uint192)": EventFragment;
    "IssuancesCanceled(address,uint256,uint256)": EventFragment;
    "IssuancesCompleted(address,uint256,uint256)": EventFragment;
    "Melted(uint256)": EventFragment;
    "Redemption(address,uint256,uint192)": EventFragment;
    "RewardsClaimed(address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BasketsNeededChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Issuance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IssuanceRateSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IssuanceStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IssuancesCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IssuancesCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Melted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redemption"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BasketsNeededChangedEventObject {
  oldBasketsNeeded: BigNumber;
  newBasketsNeeded: BigNumber;
}
export type BasketsNeededChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  BasketsNeededChangedEventObject
>;

export type BasketsNeededChangedEventFilter =
  TypedEventFilter<BasketsNeededChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface IssuanceEventObject {
  issuer: string;
  amount: BigNumber;
  baskets: BigNumber;
}
export type IssuanceEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  IssuanceEventObject
>;

export type IssuanceEventFilter = TypedEventFilter<IssuanceEvent>;

export interface IssuanceRateSetEventObject {
  oldVal: BigNumber;
  newVal: BigNumber;
}
export type IssuanceRateSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  IssuanceRateSetEventObject
>;

export type IssuanceRateSetEventFilter = TypedEventFilter<IssuanceRateSetEvent>;

export interface IssuanceStartedEventObject {
  issuer: string;
  index: BigNumber;
  amount: BigNumber;
  baskets: BigNumber;
  erc20s: string[];
  quantities: BigNumber[];
  blockAvailableAt: BigNumber;
}
export type IssuanceStartedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string[], BigNumber[], BigNumber],
  IssuanceStartedEventObject
>;

export type IssuanceStartedEventFilter = TypedEventFilter<IssuanceStartedEvent>;

export interface IssuancesCanceledEventObject {
  issuer: string;
  firstId: BigNumber;
  endId: BigNumber;
}
export type IssuancesCanceledEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  IssuancesCanceledEventObject
>;

export type IssuancesCanceledEventFilter =
  TypedEventFilter<IssuancesCanceledEvent>;

export interface IssuancesCompletedEventObject {
  issuer: string;
  firstId: BigNumber;
  endId: BigNumber;
}
export type IssuancesCompletedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  IssuancesCompletedEventObject
>;

export type IssuancesCompletedEventFilter =
  TypedEventFilter<IssuancesCompletedEvent>;

export interface MeltedEventObject {
  amount: BigNumber;
}
export type MeltedEvent = TypedEvent<[BigNumber], MeltedEventObject>;

export type MeltedEventFilter = TypedEventFilter<MeltedEvent>;

export interface RedemptionEventObject {
  redeemer: string;
  amount: BigNumber;
  baskets: BigNumber;
}
export type RedemptionEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RedemptionEventObject
>;

export type RedemptionEventFilter = TypedEventFilter<RedemptionEvent>;

export interface RewardsClaimedEventObject {
  erc20: string;
  amount: BigNumber;
}
export type RewardsClaimedEvent = TypedEvent<
  [string, BigNumber],
  RewardsClaimedEventObject
>;

export type RewardsClaimedEventFilter = TypedEventFilter<RewardsClaimedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface RToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    MIN_ISS_RATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    allVestAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    basketsNeeded(overrides?: CallOverrides): Promise<[BigNumber]>;

    cancel(
      endId: BigNumberish,
      earliest: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimAndSweepRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endIdForVest(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    init(
      main_: string,
      name_: string,
      symbol_: string,
      manifestoURI_: string,
      issuanceRate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    issuanceRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    issue(
      amtRToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    issueItem(
      account: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[RTokenP1.IssueItemStructOutput]>;

    issueQueues(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        basketNonce: BigNumber;
        left: BigNumber;
        right: BigNumber;
      }
    >;

    lastIssRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastIssRateBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    main(overrides?: CallOverrides): Promise<[string]>;

    manifestoURI(overrides?: CallOverrides): Promise<[string]>;

    melt(
      amtRToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mint(
      recipient: string,
      amtRToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    price(overrides?: CallOverrides): Promise<[BigNumber]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    redeem(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBasketsNeeded(
      basketsNeeded_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIssuanceRate(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vest(
      account: string,
      endId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  MIN_ISS_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  allVestAt(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  basketsNeeded(overrides?: CallOverrides): Promise<BigNumber>;

  cancel(
    endId: BigNumberish,
    earliest: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimAndSweepRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endIdForVest(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  init(
    main_: string,
    name_: string,
    symbol_: string,
    manifestoURI_: string,
    issuanceRate_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  issuanceRate(overrides?: CallOverrides): Promise<BigNumber>;

  issue(
    amtRToken: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  issueItem(
    account: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<RTokenP1.IssueItemStructOutput>;

  issueQueues(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      basketNonce: BigNumber;
      left: BigNumber;
      right: BigNumber;
    }
  >;

  lastIssRate(overrides?: CallOverrides): Promise<BigNumber>;

  lastIssRateBlock(overrides?: CallOverrides): Promise<BigNumber>;

  main(overrides?: CallOverrides): Promise<string>;

  manifestoURI(overrides?: CallOverrides): Promise<string>;

  melt(
    amtRToken: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mint(
    recipient: string,
    amtRToken: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  permit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  price(overrides?: CallOverrides): Promise<BigNumber>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  redeem(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBasketsNeeded(
    basketsNeeded_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIssuanceRate(
    val: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vest(
    account: string,
    endId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    MIN_ISS_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    allVestAt(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    basketsNeeded(overrides?: CallOverrides): Promise<BigNumber>;

    cancel(
      endId: BigNumberish,
      earliest: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    claimAndSweepRewards(overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    endIdForVest(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    init(
      main_: string,
      name_: string,
      symbol_: string,
      manifestoURI_: string,
      issuanceRate_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    issuanceRate(overrides?: CallOverrides): Promise<BigNumber>;

    issue(amtRToken: BigNumberish, overrides?: CallOverrides): Promise<void>;

    issueItem(
      account: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<RTokenP1.IssueItemStructOutput>;

    issueQueues(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        basketNonce: BigNumber;
        left: BigNumber;
        right: BigNumber;
      }
    >;

    lastIssRate(overrides?: CallOverrides): Promise<BigNumber>;

    lastIssRateBlock(overrides?: CallOverrides): Promise<BigNumber>;

    main(overrides?: CallOverrides): Promise<string>;

    manifestoURI(overrides?: CallOverrides): Promise<string>;

    melt(amtRToken: BigNumberish, overrides?: CallOverrides): Promise<void>;

    mint(
      recipient: string,
      amtRToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    redeem(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setBasketsNeeded(
      basketsNeeded_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setIssuanceRate(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    vest(
      account: string,
      endId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "BasketsNeededChanged(uint192,uint192)"(
      oldBasketsNeeded?: null,
      newBasketsNeeded?: null
    ): BasketsNeededChangedEventFilter;
    BasketsNeededChanged(
      oldBasketsNeeded?: null,
      newBasketsNeeded?: null
    ): BasketsNeededChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Issuance(address,uint256,uint192)"(
      issuer?: string | null,
      amount?: BigNumberish | null,
      baskets?: BigNumberish | null
    ): IssuanceEventFilter;
    Issuance(
      issuer?: string | null,
      amount?: BigNumberish | null,
      baskets?: BigNumberish | null
    ): IssuanceEventFilter;

    "IssuanceRateSet(uint192,uint192)"(
      oldVal?: BigNumberish | null,
      newVal?: BigNumberish | null
    ): IssuanceRateSetEventFilter;
    IssuanceRateSet(
      oldVal?: BigNumberish | null,
      newVal?: BigNumberish | null
    ): IssuanceRateSetEventFilter;

    "IssuanceStarted(address,uint256,uint256,uint192,address[],uint256[],uint192)"(
      issuer?: string | null,
      index?: BigNumberish | null,
      amount?: BigNumberish | null,
      baskets?: null,
      erc20s?: null,
      quantities?: null,
      blockAvailableAt?: null
    ): IssuanceStartedEventFilter;
    IssuanceStarted(
      issuer?: string | null,
      index?: BigNumberish | null,
      amount?: BigNumberish | null,
      baskets?: null,
      erc20s?: null,
      quantities?: null,
      blockAvailableAt?: null
    ): IssuanceStartedEventFilter;

    "IssuancesCanceled(address,uint256,uint256)"(
      issuer?: string | null,
      firstId?: BigNumberish | null,
      endId?: BigNumberish | null
    ): IssuancesCanceledEventFilter;
    IssuancesCanceled(
      issuer?: string | null,
      firstId?: BigNumberish | null,
      endId?: BigNumberish | null
    ): IssuancesCanceledEventFilter;

    "IssuancesCompleted(address,uint256,uint256)"(
      issuer?: string | null,
      firstId?: BigNumberish | null,
      endId?: BigNumberish | null
    ): IssuancesCompletedEventFilter;
    IssuancesCompleted(
      issuer?: string | null,
      firstId?: BigNumberish | null,
      endId?: BigNumberish | null
    ): IssuancesCompletedEventFilter;

    "Melted(uint256)"(amount?: null): MeltedEventFilter;
    Melted(amount?: null): MeltedEventFilter;

    "Redemption(address,uint256,uint192)"(
      redeemer?: string | null,
      amount?: BigNumberish | null,
      baskets?: BigNumberish | null
    ): RedemptionEventFilter;
    Redemption(
      redeemer?: string | null,
      amount?: BigNumberish | null,
      baskets?: BigNumberish | null
    ): RedemptionEventFilter;

    "RewardsClaimed(address,uint256)"(
      erc20?: string | null,
      amount?: BigNumberish | null
    ): RewardsClaimedEventFilter;
    RewardsClaimed(
      erc20?: string | null,
      amount?: BigNumberish | null
    ): RewardsClaimedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_ISS_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    allVestAt(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    basketsNeeded(overrides?: CallOverrides): Promise<BigNumber>;

    cancel(
      endId: BigNumberish,
      earliest: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimAndSweepRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endIdForVest(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    init(
      main_: string,
      name_: string,
      symbol_: string,
      manifestoURI_: string,
      issuanceRate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    issuanceRate(overrides?: CallOverrides): Promise<BigNumber>;

    issue(
      amtRToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    issueItem(
      account: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issueQueues(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    lastIssRate(overrides?: CallOverrides): Promise<BigNumber>;

    lastIssRateBlock(overrides?: CallOverrides): Promise<BigNumber>;

    main(overrides?: CallOverrides): Promise<BigNumber>;

    manifestoURI(overrides?: CallOverrides): Promise<BigNumber>;

    melt(
      amtRToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mint(
      recipient: string,
      amtRToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBasketsNeeded(
      basketsNeeded_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIssuanceRate(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vest(
      account: string,
      endId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_ISS_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allVestAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    basketsNeeded(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancel(
      endId: BigNumberish,
      earliest: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimAndSweepRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endIdForVest(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    init(
      main_: string,
      name_: string,
      symbol_: string,
      manifestoURI_: string,
      issuanceRate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    issuanceRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    issue(
      amtRToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    issueItem(
      account: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issueQueues(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastIssRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastIssRateBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    main(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manifestoURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    melt(
      amtRToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mint(
      recipient: string,
      amtRToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBasketsNeeded(
      basketsNeeded_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIssuanceRate(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vest(
      account: string,
      endId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

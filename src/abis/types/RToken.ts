/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type RevenueShareStruct = {
  rTokenDist: BigNumberish;
  rsrDist: BigNumberish;
};

export type RevenueShareStructOutput = [number, number] & {
  rTokenDist: number;
  rsrDist: number;
};

export type DeploymentParamsStruct = {
  maxAuctionSize: BigNumberish;
  dist: RevenueShareStruct;
  rewardPeriod: BigNumberish;
  rewardRatio: BigNumberish;
  unstakingDelay: BigNumberish;
  auctionDelay: BigNumberish;
  auctionLength: BigNumberish;
  backingBuffer: BigNumberish;
  maxTradeSlippage: BigNumberish;
  dustAmount: BigNumberish;
  issuanceRate: BigNumberish;
};

export type DeploymentParamsStructOutput = [
  BigNumber,
  RevenueShareStructOutput,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  maxAuctionSize: BigNumber;
  dist: RevenueShareStructOutput;
  rewardPeriod: BigNumber;
  rewardRatio: BigNumber;
  unstakingDelay: BigNumber;
  auctionDelay: BigNumber;
  auctionLength: BigNumber;
  backingBuffer: BigNumber;
  maxTradeSlippage: BigNumber;
  dustAmount: BigNumber;
  issuanceRate: BigNumber;
};

export type CoreStruct = {
  rToken: string;
  stRSR: string;
  assetRegistry: string;
  basketHandler: string;
  backingManager: string;
  distributor: string;
  rsrTrader: string;
  rTokenTrader: string;
};

export type CoreStructOutput = [
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string
] & {
  rToken: string;
  stRSR: string;
  assetRegistry: string;
  basketHandler: string;
  backingManager: string;
  distributor: string;
  rsrTrader: string;
  rTokenTrader: string;
};

export type PeripheryStruct = {
  market: string;
  furnace: string;
  assets: string[];
};

export type PeripheryStructOutput = [string, string, string[]] & {
  market: string;
  furnace: string;
  assets: string[];
};

export type ConstructorArgsStruct = {
  params: DeploymentParamsStruct;
  core: CoreStruct;
  periphery: PeripheryStruct;
  rsr: string;
};

export type ConstructorArgsStructOutput = [
  DeploymentParamsStructOutput,
  CoreStructOutput,
  PeripheryStructOutput,
  string
] & {
  params: DeploymentParamsStructOutput;
  core: CoreStructOutput;
  periphery: PeripheryStructOutput;
  rsr: string;
};

export interface RTokenInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "MIN_ISSUANCE_RATE()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "basketsNeeded()": FunctionFragment;
    "cancel(uint256,bool)": FunctionFragment;
    "claimAndSweepRewards()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "endIdForVest(address)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initComponent(address,((int192,(uint16,uint16),uint256,int192,uint256,uint256,uint256,int192,int192,int192,int192),(address,address,address,address,address,address,address,address),(address,address,address[]),address))": FunctionFragment;
    "issuanceRate()": FunctionFragment;
    "issuances(address,uint256)": FunctionFragment;
    "issue(uint256)": FunctionFragment;
    "maxIssuable(address)": FunctionFragment;
    "melt(uint256)": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "price()": FunctionFragment;
    "redeem(uint256)": FunctionFragment;
    "setBasketsNeeded(int192)": FunctionFragment;
    "setIssuanceRate(int192)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "vest(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_ISSUANCE_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "basketsNeeded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAndSweepRewards",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endIdForVest",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initComponent",
    values: [string, ConstructorArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "issuanceRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "issuances",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "issue", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "maxIssuable", values: [string]): string;
  encodeFunctionData(functionFragment: "melt", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBasketsNeeded",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setIssuanceRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vest",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_ISSUANCE_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "basketsNeeded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimAndSweepRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endIdForVest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initComponent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issuanceRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "issuances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxIssuable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "melt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBasketsNeeded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIssuanceRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vest", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "BasketsNeededChanged(int192,int192)": EventFragment;
    "IssuanceRateSet(int192,int192)": EventFragment;
    "IssuanceStarted(address,uint256,uint256,int192,address[],uint256[],int192)": EventFragment;
    "IssuancesCanceled(address,uint256,uint256)": EventFragment;
    "IssuancesCompleted(address,uint256,uint256)": EventFragment;
    "MainSet(address,address)": EventFragment;
    "Melted(uint256)": EventFragment;
    "Redemption(address,uint256,int192)": EventFragment;
    "RewardsClaimed(address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BasketsNeededChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IssuanceRateSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IssuanceStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IssuancesCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IssuancesCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MainSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Melted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redemption"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type BasketsNeededChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { oldBasketsNeeded: BigNumber; newBasketsNeeded: BigNumber }
>;

export type BasketsNeededChangedEventFilter =
  TypedEventFilter<BasketsNeededChangedEvent>;

export type IssuanceRateSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  { oldVal: BigNumber; newVal: BigNumber }
>;

export type IssuanceRateSetEventFilter = TypedEventFilter<IssuanceRateSetEvent>;

export type IssuanceStartedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string[], BigNumber[], BigNumber],
  {
    issuer: string;
    index: BigNumber;
    amount: BigNumber;
    baskets: BigNumber;
    erc20s: string[];
    quantities: BigNumber[];
    blockAvailableAt: BigNumber;
  }
>;

export type IssuanceStartedEventFilter = TypedEventFilter<IssuanceStartedEvent>;

export type IssuancesCanceledEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { issuer: string; firstId: BigNumber; endId: BigNumber }
>;

export type IssuancesCanceledEventFilter =
  TypedEventFilter<IssuancesCanceledEvent>;

export type IssuancesCompletedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { issuer: string; firstId: BigNumber; endId: BigNumber }
>;

export type IssuancesCompletedEventFilter =
  TypedEventFilter<IssuancesCompletedEvent>;

export type MainSetEvent = TypedEvent<
  [string, string],
  { oldMain: string; newMain: string }
>;

export type MainSetEventFilter = TypedEventFilter<MainSetEvent>;

export type MeltedEvent = TypedEvent<[BigNumber], { amount: BigNumber }>;

export type MeltedEventFilter = TypedEventFilter<MeltedEvent>;

export type RedemptionEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { redeemer: string; amount: BigNumber; baskets: BigNumber }
>;

export type RedemptionEventFilter = TypedEventFilter<RedemptionEvent>;

export type RewardsClaimedEvent = TypedEvent<
  [string, BigNumber],
  { erc20: string; amount: BigNumber }
>;

export type RewardsClaimedEventFilter = TypedEventFilter<RewardsClaimedEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface RToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    MIN_ISSUANCE_RATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    basketsNeeded(overrides?: CallOverrides): Promise<[BigNumber]>;

    cancel(
      endId: BigNumberish,
      earliest: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimAndSweepRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endIdForVest(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initComponent(
      main_: string,
      args: ConstructorArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    issuanceRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    issuances(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        issuer: string;
        amount: BigNumber;
        baskets: BigNumber;
        basketNonce: BigNumber;
        blockAvailableAt: BigNumber;
        processed: boolean;
      }
    >;

    issue(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxIssuable(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    melt(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mint(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    price(overrides?: CallOverrides): Promise<[BigNumber] & { p: BigNumber }>;

    redeem(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBasketsNeeded(
      basketsNeeded_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIssuanceRate(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vest(
      account: string,
      endId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  MIN_ISSUANCE_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  basketsNeeded(overrides?: CallOverrides): Promise<BigNumber>;

  cancel(
    endId: BigNumberish,
    earliest: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimAndSweepRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endIdForVest(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initComponent(
    main_: string,
    args: ConstructorArgsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  issuanceRate(overrides?: CallOverrides): Promise<BigNumber>;

  issuances(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      issuer: string;
      amount: BigNumber;
      baskets: BigNumber;
      basketNonce: BigNumber;
      blockAvailableAt: BigNumber;
      processed: boolean;
    }
  >;

  issue(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxIssuable(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  melt(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mint(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  permit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  price(overrides?: CallOverrides): Promise<BigNumber>;

  redeem(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBasketsNeeded(
    basketsNeeded_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIssuanceRate(
    val: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vest(
    account: string,
    endId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    MIN_ISSUANCE_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    basketsNeeded(overrides?: CallOverrides): Promise<BigNumber>;

    cancel(
      endId: BigNumberish,
      earliest: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    claimAndSweepRewards(overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    endIdForVest(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initComponent(
      main_: string,
      args: ConstructorArgsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    issuanceRate(overrides?: CallOverrides): Promise<BigNumber>;

    issuances(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        issuer: string;
        amount: BigNumber;
        baskets: BigNumber;
        basketNonce: BigNumber;
        blockAvailableAt: BigNumber;
        processed: boolean;
      }
    >;

    issue(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    maxIssuable(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    melt(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    mint(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    setBasketsNeeded(
      basketsNeeded_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setIssuanceRate(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    vest(
      account: string,
      endId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "BasketsNeededChanged(int192,int192)"(
      oldBasketsNeeded?: null,
      newBasketsNeeded?: null
    ): BasketsNeededChangedEventFilter;
    BasketsNeededChanged(
      oldBasketsNeeded?: null,
      newBasketsNeeded?: null
    ): BasketsNeededChangedEventFilter;

    "IssuanceRateSet(int192,int192)"(
      oldVal?: BigNumberish | null,
      newVal?: BigNumberish | null
    ): IssuanceRateSetEventFilter;
    IssuanceRateSet(
      oldVal?: BigNumberish | null,
      newVal?: BigNumberish | null
    ): IssuanceRateSetEventFilter;

    "IssuanceStarted(address,uint256,uint256,int192,address[],uint256[],int192)"(
      issuer?: string | null,
      index?: BigNumberish | null,
      amount?: BigNumberish | null,
      baskets?: null,
      erc20s?: null,
      quantities?: null,
      blockAvailableAt?: null
    ): IssuanceStartedEventFilter;
    IssuanceStarted(
      issuer?: string | null,
      index?: BigNumberish | null,
      amount?: BigNumberish | null,
      baskets?: null,
      erc20s?: null,
      quantities?: null,
      blockAvailableAt?: null
    ): IssuanceStartedEventFilter;

    "IssuancesCanceled(address,uint256,uint256)"(
      issuer?: string | null,
      firstId?: BigNumberish | null,
      endId?: BigNumberish | null
    ): IssuancesCanceledEventFilter;
    IssuancesCanceled(
      issuer?: string | null,
      firstId?: BigNumberish | null,
      endId?: BigNumberish | null
    ): IssuancesCanceledEventFilter;

    "IssuancesCompleted(address,uint256,uint256)"(
      issuer?: string | null,
      firstId?: BigNumberish | null,
      endId?: BigNumberish | null
    ): IssuancesCompletedEventFilter;
    IssuancesCompleted(
      issuer?: string | null,
      firstId?: BigNumberish | null,
      endId?: BigNumberish | null
    ): IssuancesCompletedEventFilter;

    "MainSet(address,address)"(
      oldMain?: string | null,
      newMain?: string | null
    ): MainSetEventFilter;
    MainSet(
      oldMain?: string | null,
      newMain?: string | null
    ): MainSetEventFilter;

    "Melted(uint256)"(amount?: null): MeltedEventFilter;
    Melted(amount?: null): MeltedEventFilter;

    "Redemption(address,uint256,int192)"(
      redeemer?: string | null,
      amount?: BigNumberish | null,
      baskets?: BigNumberish | null
    ): RedemptionEventFilter;
    Redemption(
      redeemer?: string | null,
      amount?: BigNumberish | null,
      baskets?: BigNumberish | null
    ): RedemptionEventFilter;

    "RewardsClaimed(address,uint256)"(
      erc20?: string | null,
      amount?: BigNumberish | null
    ): RewardsClaimedEventFilter;
    RewardsClaimed(
      erc20?: string | null,
      amount?: BigNumberish | null
    ): RewardsClaimedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_ISSUANCE_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    basketsNeeded(overrides?: CallOverrides): Promise<BigNumber>;

    cancel(
      endId: BigNumberish,
      earliest: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimAndSweepRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endIdForVest(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initComponent(
      main_: string,
      args: ConstructorArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    issuanceRate(overrides?: CallOverrides): Promise<BigNumber>;

    issuances(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issue(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxIssuable(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    melt(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mint(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBasketsNeeded(
      basketsNeeded_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIssuanceRate(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vest(
      account: string,
      endId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_ISSUANCE_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    basketsNeeded(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancel(
      endId: BigNumberish,
      earliest: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimAndSweepRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endIdForVest(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initComponent(
      main_: string,
      args: ConstructorArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    issuanceRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    issuances(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issue(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxIssuable(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    melt(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mint(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBasketsNeeded(
      basketsNeeded_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIssuanceRate(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vest(
      account: string,
      endId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

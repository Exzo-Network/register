/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type RevenueShareStruct = {
  rTokenDist: BigNumberish;
  rsrDist: BigNumberish;
};

export type RevenueShareStructOutput = [number, number] & {
  rTokenDist: number;
  rsrDist: number;
};

export type DeploymentParamsStruct = {
  maxAuctionSize: BigNumberish;
  dist: RevenueShareStruct;
  rewardPeriod: BigNumberish;
  rewardRatio: BigNumberish;
  unstakingDelay: BigNumberish;
  auctionDelay: BigNumberish;
  auctionLength: BigNumberish;
  backingBuffer: BigNumberish;
  maxTradeSlippage: BigNumberish;
  dustAmount: BigNumberish;
  issuanceRate: BigNumberish;
};

export type DeploymentParamsStructOutput = [
  BigNumber,
  RevenueShareStructOutput,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  maxAuctionSize: BigNumber;
  dist: RevenueShareStructOutput;
  rewardPeriod: BigNumber;
  rewardRatio: BigNumber;
  unstakingDelay: BigNumber;
  auctionDelay: BigNumber;
  auctionLength: BigNumber;
  backingBuffer: BigNumber;
  maxTradeSlippage: BigNumber;
  dustAmount: BigNumber;
  issuanceRate: BigNumber;
};

export type ComponentsStruct = {
  rToken: string;
  stRSR: string;
  assetRegistry: string;
  basketHandler: string;
  backingManager: string;
  distributor: string;
  furnace: string;
  broker: string;
  rsrTrader: string;
  rTokenTrader: string;
};

export type ComponentsStructOutput = [
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string
] & {
  rToken: string;
  stRSR: string;
  assetRegistry: string;
  basketHandler: string;
  backingManager: string;
  distributor: string;
  furnace: string;
  broker: string;
  rsrTrader: string;
  rTokenTrader: string;
};

export type ConstructorArgsStruct = {
  params: DeploymentParamsStruct;
  components: ComponentsStruct;
  rsr: string;
  gnosis: string;
  assets: string[];
};

export type ConstructorArgsStructOutput = [
  DeploymentParamsStructOutput,
  ComponentsStructOutput,
  string,
  string,
  string[]
] & {
  params: DeploymentParamsStructOutput;
  components: ComponentsStructOutput;
  rsr: string;
  gnosis: string;
  assets: string[];
};

export interface StRsrInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "endIdForWithdraw(address)": FunctionFragment;
    "exchangeRate()": FunctionFragment;
    "initComponent(address,((int192,(uint16,uint16),uint256,int192,uint256,uint256,uint256,int192,int192,int192,int192),(address,address,address,address,address,address,address,address,address,address),address,address,address[]))": FunctionFragment;
    "main()": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "payoutRewards()": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "rewardPeriod()": FunctionFragment;
    "rewardRatio()": FunctionFragment;
    "seizeRSR(uint256)": FunctionFragment;
    "setRewardPeriod(uint256)": FunctionFragment;
    "setRewardRatio(int192)": FunctionFragment;
    "setUnstakingDelay(uint256)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
    "unstakingDelay()": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
    "withdrawals(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "endIdForWithdraw",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initComponent",
    values: [string, ConstructorArgsStruct]
  ): string;
  encodeFunctionData(functionFragment: "main", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(
    functionFragment: "payoutRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seizeRSR",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnstakingDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakingDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawals",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "endIdForWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initComponent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "main", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payoutRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seizeRSR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRewardPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnstakingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstakingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawals",
    data: BytesLike
  ): Result;

  events: {
    "AllBalancesReset(uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "MainSet(address,address)": EventFragment;
    "RSRRewarded(uint256,uint256)": EventFragment;
    "RSRSeized(address,uint256)": EventFragment;
    "RewardPeriodSet(uint256,uint256)": EventFragment;
    "RewardRatioSet(int192,int192)": EventFragment;
    "Staked(address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UnstakingCompleted(uint256,uint256,uint256,address,uint256)": EventFragment;
    "UnstakingDelaySet(uint256,uint256)": EventFragment;
    "UnstakingStarted(uint256,uint256,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllBalancesReset"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MainSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RSRRewarded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RSRSeized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPeriodSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardRatioSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnstakingCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnstakingDelaySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnstakingStarted"): EventFragment;
}

export type AllBalancesResetEvent = TypedEvent<
  [BigNumber],
  { newEra: BigNumber }
>;

export type AllBalancesResetEventFilter =
  TypedEventFilter<AllBalancesResetEvent>;

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type MainSetEvent = TypedEvent<
  [string, string],
  { oldMain: string; newMain: string }
>;

export type MainSetEventFilter = TypedEventFilter<MainSetEvent>;

export type RSRRewardedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { amount: BigNumber; numPeriods: BigNumber }
>;

export type RSRRewardedEventFilter = TypedEventFilter<RSRRewardedEvent>;

export type RSRSeizedEvent = TypedEvent<
  [string, BigNumber],
  { from: string; amount: BigNumber }
>;

export type RSRSeizedEventFilter = TypedEventFilter<RSRSeizedEvent>;

export type RewardPeriodSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  { oldVal: BigNumber; newVal: BigNumber }
>;

export type RewardPeriodSetEventFilter = TypedEventFilter<RewardPeriodSetEvent>;

export type RewardRatioSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  { oldVal: BigNumber; newVal: BigNumber }
>;

export type RewardRatioSetEventFilter = TypedEventFilter<RewardRatioSetEvent>;

export type StakedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { staker: string; rsrAmount: BigNumber; stRSRAmount: BigNumber }
>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type UnstakingCompletedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, BigNumber],
  {
    firstId: BigNumber;
    endId: BigNumber;
    draftEra: BigNumber;
    staker: string;
    rsrAmount: BigNumber;
  }
>;

export type UnstakingCompletedEventFilter =
  TypedEventFilter<UnstakingCompletedEvent>;

export type UnstakingDelaySetEvent = TypedEvent<
  [BigNumber, BigNumber],
  { oldVal: BigNumber; newVal: BigNumber }
>;

export type UnstakingDelaySetEventFilter =
  TypedEventFilter<UnstakingDelaySetEvent>;

export type UnstakingStartedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber],
  {
    draftId: BigNumber;
    draftEra: BigNumber;
    staker: string;
    rsrAmount: BigNumber;
    stRSRAmount: BigNumber;
    availableAt: BigNumber;
  }
>;

export type UnstakingStartedEventFilter =
  TypedEventFilter<UnstakingStartedEvent>;

export interface StRsr extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StRsrInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner_: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    endIdForWithdraw(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    exchangeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    initComponent(
      main_: string,
      args: ConstructorArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    main(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(owner_: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    payoutRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    permit(
      owner_: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    seizeRSR(
      rsrAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardPeriod(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardRatio(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUnstakingDelay(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      rsrAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstake(
      stakeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakingDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      account: string,
      endId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawals(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        account: string;
        rsrAmount: BigNumber;
        availableAt: BigNumber;
      }
    >;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner_: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  endIdForWithdraw(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

  initComponent(
    main_: string,
    args: ConstructorArgsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  main(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(owner_: string, overrides?: CallOverrides): Promise<BigNumber>;

  payoutRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  permit(
    owner_: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  rewardRatio(overrides?: CallOverrides): Promise<BigNumber>;

  seizeRSR(
    rsrAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardPeriod(
    val: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardRatio(
    val: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUnstakingDelay(
    val: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    rsrAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstake(
    stakeAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakingDelay(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    account: string,
    endId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawals(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      account: string;
      rsrAmount: BigNumber;
      availableAt: BigNumber;
    }
  >;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner_: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    endIdForWithdraw(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    initComponent(
      main_: string,
      args: ConstructorArgsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    main(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(owner_: string, overrides?: CallOverrides): Promise<BigNumber>;

    payoutRewards(overrides?: CallOverrides): Promise<void>;

    permit(
      owner_: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRatio(overrides?: CallOverrides): Promise<BigNumber>;

    seizeRSR(
      rsrAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRewardPeriod(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardRatio(val: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setUnstakingDelay(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(rsrAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unstake(
      stakeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unstakingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      account: string,
      endId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawals(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        account: string;
        rsrAmount: BigNumber;
        availableAt: BigNumber;
      }
    >;
  };

  filters: {
    "AllBalancesReset(uint256)"(
      newEra?: BigNumberish | null
    ): AllBalancesResetEventFilter;
    AllBalancesReset(newEra?: BigNumberish | null): AllBalancesResetEventFilter;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "MainSet(address,address)"(
      oldMain?: string | null,
      newMain?: string | null
    ): MainSetEventFilter;
    MainSet(
      oldMain?: string | null,
      newMain?: string | null
    ): MainSetEventFilter;

    "RSRRewarded(uint256,uint256)"(
      amount?: BigNumberish | null,
      numPeriods?: BigNumberish | null
    ): RSRRewardedEventFilter;
    RSRRewarded(
      amount?: BigNumberish | null,
      numPeriods?: BigNumberish | null
    ): RSRRewardedEventFilter;

    "RSRSeized(address,uint256)"(
      from?: string | null,
      amount?: BigNumberish | null
    ): RSRSeizedEventFilter;
    RSRSeized(
      from?: string | null,
      amount?: BigNumberish | null
    ): RSRSeizedEventFilter;

    "RewardPeriodSet(uint256,uint256)"(
      oldVal?: BigNumberish | null,
      newVal?: BigNumberish | null
    ): RewardPeriodSetEventFilter;
    RewardPeriodSet(
      oldVal?: BigNumberish | null,
      newVal?: BigNumberish | null
    ): RewardPeriodSetEventFilter;

    "RewardRatioSet(int192,int192)"(
      oldVal?: BigNumberish | null,
      newVal?: BigNumberish | null
    ): RewardRatioSetEventFilter;
    RewardRatioSet(
      oldVal?: BigNumberish | null,
      newVal?: BigNumberish | null
    ): RewardRatioSetEventFilter;

    "Staked(address,uint256,uint256)"(
      staker?: string | null,
      rsrAmount?: BigNumberish | null,
      stRSRAmount?: BigNumberish | null
    ): StakedEventFilter;
    Staked(
      staker?: string | null,
      rsrAmount?: BigNumberish | null,
      stRSRAmount?: BigNumberish | null
    ): StakedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "UnstakingCompleted(uint256,uint256,uint256,address,uint256)"(
      firstId?: BigNumberish | null,
      endId?: BigNumberish | null,
      draftEra?: null,
      staker?: string | null,
      rsrAmount?: null
    ): UnstakingCompletedEventFilter;
    UnstakingCompleted(
      firstId?: BigNumberish | null,
      endId?: BigNumberish | null,
      draftEra?: null,
      staker?: string | null,
      rsrAmount?: null
    ): UnstakingCompletedEventFilter;

    "UnstakingDelaySet(uint256,uint256)"(
      oldVal?: BigNumberish | null,
      newVal?: BigNumberish | null
    ): UnstakingDelaySetEventFilter;
    UnstakingDelaySet(
      oldVal?: BigNumberish | null,
      newVal?: BigNumberish | null
    ): UnstakingDelaySetEventFilter;

    "UnstakingStarted(uint256,uint256,address,uint256,uint256,uint256)"(
      draftId?: BigNumberish | null,
      draftEra?: BigNumberish | null,
      staker?: string | null,
      rsrAmount?: null,
      stRSRAmount?: null,
      availableAt?: null
    ): UnstakingStartedEventFilter;
    UnstakingStarted(
      draftId?: BigNumberish | null,
      draftEra?: BigNumberish | null,
      staker?: string | null,
      rsrAmount?: null,
      stRSRAmount?: null,
      availableAt?: null
    ): UnstakingStartedEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner_: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    endIdForWithdraw(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    initComponent(
      main_: string,
      args: ConstructorArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    main(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(owner_: string, overrides?: CallOverrides): Promise<BigNumber>;

    payoutRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    permit(
      owner_: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRatio(overrides?: CallOverrides): Promise<BigNumber>;

    seizeRSR(
      rsrAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardPeriod(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardRatio(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUnstakingDelay(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      rsrAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstake(
      stakeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      account: string,
      endId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawals(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner_: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endIdForWithdraw(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exchangeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initComponent(
      main_: string,
      args: ConstructorArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    main(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      owner_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payoutRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    permit(
      owner_: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seizeRSR(
      rsrAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardPeriod(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardRatio(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUnstakingDelay(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      rsrAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      stakeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakingDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      account: string,
      endId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawals(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

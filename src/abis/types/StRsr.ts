/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface StRsrInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "draftQueueLen(uint256,address)": FunctionFragment;
    "draftQueues(uint256,address,uint256)": FunctionFragment;
    "draftRate()": FunctionFragment;
    "endIdForWithdraw(address)": FunctionFragment;
    "exchangeRate()": FunctionFragment;
    "firstRemainingDraft(uint256,address)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "init(address,string,string,uint32,uint32,uint192)": FunctionFragment;
    "main()": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "payoutRewards()": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "rewardPeriod()": FunctionFragment;
    "rewardRatio()": FunctionFragment;
    "seizeRSR(uint256)": FunctionFragment;
    "setName(string)": FunctionFragment;
    "setRewardPeriod(uint32)": FunctionFragment;
    "setRewardRatio(uint192)": FunctionFragment;
    "setSymbol(string)": FunctionFragment;
    "setUnstakingDelay(uint32)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stakeRate()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
    "unstakingDelay()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOMAIN_SEPARATOR"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "decimals"
      | "decreaseAllowance"
      | "draftQueueLen"
      | "draftQueues"
      | "draftRate"
      | "endIdForWithdraw"
      | "exchangeRate"
      | "firstRemainingDraft"
      | "increaseAllowance"
      | "init"
      | "main"
      | "name"
      | "nonces"
      | "payoutRewards"
      | "permit"
      | "proxiableUUID"
      | "rewardPeriod"
      | "rewardRatio"
      | "seizeRSR"
      | "setName"
      | "setRewardPeriod"
      | "setRewardRatio"
      | "setSymbol"
      | "setUnstakingDelay"
      | "stake"
      | "stakeRate"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "unstake"
      | "unstakingDelay"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "draftQueueLen",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "draftQueues",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "draftRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "endIdForWithdraw",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "firstRemainingDraft",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [string, string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "main", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(
    functionFragment: "payoutRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seizeRSR",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setName", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setRewardPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setSymbol", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setUnstakingDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "stakeRate", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakingDelay",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "draftQueueLen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "draftQueues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "draftRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "endIdForWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstRemainingDraft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "main", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payoutRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seizeRSR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRewardPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSymbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setUnstakingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstakingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "AllBalancesReset(uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "ExchangeRateSet(uint192,uint192)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "RewardPeriodSet(uint32,uint32)": EventFragment;
    "RewardRatioSet(uint192,uint192)": EventFragment;
    "Staked(uint256,address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UnstakingCompleted(uint256,uint256,uint256,address,uint256)": EventFragment;
    "UnstakingDelaySet(uint32,uint32)": EventFragment;
    "UnstakingStarted(uint256,uint256,address,uint256,uint256,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllBalancesReset"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExchangeRateSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPeriodSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardRatioSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnstakingCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnstakingDelaySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnstakingStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface AllBalancesResetEventObject {
  newEra: BigNumber;
}
export type AllBalancesResetEvent = TypedEvent<
  [BigNumber],
  AllBalancesResetEventObject
>;

export type AllBalancesResetEventFilter =
  TypedEventFilter<AllBalancesResetEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface ExchangeRateSetEventObject {
  oldVal: BigNumber;
  newVal: BigNumber;
}
export type ExchangeRateSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  ExchangeRateSetEventObject
>;

export type ExchangeRateSetEventFilter = TypedEventFilter<ExchangeRateSetEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface RewardPeriodSetEventObject {
  oldVal: number;
  newVal: number;
}
export type RewardPeriodSetEvent = TypedEvent<
  [number, number],
  RewardPeriodSetEventObject
>;

export type RewardPeriodSetEventFilter = TypedEventFilter<RewardPeriodSetEvent>;

export interface RewardRatioSetEventObject {
  oldVal: BigNumber;
  newVal: BigNumber;
}
export type RewardRatioSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  RewardRatioSetEventObject
>;

export type RewardRatioSetEventFilter = TypedEventFilter<RewardRatioSetEvent>;

export interface StakedEventObject {
  era: BigNumber;
  staker: string;
  rsrAmount: BigNumber;
  stRSRAmount: BigNumber;
}
export type StakedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  StakedEventObject
>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UnstakingCompletedEventObject {
  firstId: BigNumber;
  endId: BigNumber;
  draftEra: BigNumber;
  staker: string;
  rsrAmount: BigNumber;
}
export type UnstakingCompletedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, BigNumber],
  UnstakingCompletedEventObject
>;

export type UnstakingCompletedEventFilter =
  TypedEventFilter<UnstakingCompletedEvent>;

export interface UnstakingDelaySetEventObject {
  oldVal: number;
  newVal: number;
}
export type UnstakingDelaySetEvent = TypedEvent<
  [number, number],
  UnstakingDelaySetEventObject
>;

export type UnstakingDelaySetEventFilter =
  TypedEventFilter<UnstakingDelaySetEvent>;

export interface UnstakingStartedEventObject {
  draftId: BigNumber;
  draftEra: BigNumber;
  staker: string;
  rsrAmount: BigNumber;
  stRSRAmount: BigNumber;
  availableAt: BigNumber;
}
export type UnstakingStartedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber],
  UnstakingStartedEventObject
>;

export type UnstakingStartedEventFilter =
  TypedEventFilter<UnstakingStartedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface StRsr extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StRsrInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    draftQueueLen(
      era_: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    draftQueues(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { drafts: BigNumber; availableAt: BigNumber }
    >;

    draftRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    endIdForWithdraw(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    exchangeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    firstRemainingDraft(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    init(
      main_: string,
      name_: string,
      symbol_: string,
      unstakingDelay_: BigNumberish,
      rewardPeriod_: BigNumberish,
      rewardRatio_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    main(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    payoutRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    rewardPeriod(overrides?: CallOverrides): Promise<[number]>;

    rewardRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    seizeRSR(
      rsrAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setName(
      name_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardPeriod(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardRatio(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSymbol(
      symbol_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUnstakingDelay(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      rsrAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstake(
      stakeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakingDelay(overrides?: CallOverrides): Promise<[number]>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      account: string,
      endId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  draftQueueLen(
    era_: BigNumberish,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  draftQueues(
    arg0: BigNumberish,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { drafts: BigNumber; availableAt: BigNumber }
  >;

  draftRate(overrides?: CallOverrides): Promise<BigNumber>;

  endIdForWithdraw(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

  firstRemainingDraft(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  init(
    main_: string,
    name_: string,
    symbol_: string,
    unstakingDelay_: BigNumberish,
    rewardPeriod_: BigNumberish,
    rewardRatio_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  main(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  payoutRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  permit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  rewardPeriod(overrides?: CallOverrides): Promise<number>;

  rewardRatio(overrides?: CallOverrides): Promise<BigNumber>;

  seizeRSR(
    rsrAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setName(
    name_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardPeriod(
    val: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardRatio(
    val: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSymbol(
    symbol_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUnstakingDelay(
    val: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    rsrAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeRate(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstake(
    stakeAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakingDelay(overrides?: CallOverrides): Promise<number>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    account: string,
    endId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    draftQueueLen(
      era_: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    draftQueues(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { drafts: BigNumber; availableAt: BigNumber }
    >;

    draftRate(overrides?: CallOverrides): Promise<BigNumber>;

    endIdForWithdraw(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    firstRemainingDraft(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    init(
      main_: string,
      name_: string,
      symbol_: string,
      unstakingDelay_: BigNumberish,
      rewardPeriod_: BigNumberish,
      rewardRatio_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    main(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    payoutRewards(overrides?: CallOverrides): Promise<void>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    rewardPeriod(overrides?: CallOverrides): Promise<number>;

    rewardRatio(overrides?: CallOverrides): Promise<BigNumber>;

    seizeRSR(rsrAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setName(name_: string, overrides?: CallOverrides): Promise<void>;

    setRewardPeriod(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardRatio(val: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setSymbol(symbol_: string, overrides?: CallOverrides): Promise<void>;

    setUnstakingDelay(
      val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(rsrAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stakeRate(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unstake(
      stakeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unstakingDelay(overrides?: CallOverrides): Promise<number>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      account: string,
      endId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "AllBalancesReset(uint256)"(
      newEra?: BigNumberish | null
    ): AllBalancesResetEventFilter;
    AllBalancesReset(newEra?: BigNumberish | null): AllBalancesResetEventFilter;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "ExchangeRateSet(uint192,uint192)"(
      oldVal?: BigNumberish | null,
      newVal?: BigNumberish | null
    ): ExchangeRateSetEventFilter;
    ExchangeRateSet(
      oldVal?: BigNumberish | null,
      newVal?: BigNumberish | null
    ): ExchangeRateSetEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "RewardPeriodSet(uint32,uint32)"(
      oldVal?: BigNumberish | null,
      newVal?: BigNumberish | null
    ): RewardPeriodSetEventFilter;
    RewardPeriodSet(
      oldVal?: BigNumberish | null,
      newVal?: BigNumberish | null
    ): RewardPeriodSetEventFilter;

    "RewardRatioSet(uint192,uint192)"(
      oldVal?: BigNumberish | null,
      newVal?: BigNumberish | null
    ): RewardRatioSetEventFilter;
    RewardRatioSet(
      oldVal?: BigNumberish | null,
      newVal?: BigNumberish | null
    ): RewardRatioSetEventFilter;

    "Staked(uint256,address,uint256,uint256)"(
      era?: BigNumberish | null,
      staker?: string | null,
      rsrAmount?: null,
      stRSRAmount?: BigNumberish | null
    ): StakedEventFilter;
    Staked(
      era?: BigNumberish | null,
      staker?: string | null,
      rsrAmount?: null,
      stRSRAmount?: BigNumberish | null
    ): StakedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "UnstakingCompleted(uint256,uint256,uint256,address,uint256)"(
      firstId?: BigNumberish | null,
      endId?: BigNumberish | null,
      draftEra?: null,
      staker?: string | null,
      rsrAmount?: null
    ): UnstakingCompletedEventFilter;
    UnstakingCompleted(
      firstId?: BigNumberish | null,
      endId?: BigNumberish | null,
      draftEra?: null,
      staker?: string | null,
      rsrAmount?: null
    ): UnstakingCompletedEventFilter;

    "UnstakingDelaySet(uint32,uint32)"(
      oldVal?: BigNumberish | null,
      newVal?: BigNumberish | null
    ): UnstakingDelaySetEventFilter;
    UnstakingDelaySet(
      oldVal?: BigNumberish | null,
      newVal?: BigNumberish | null
    ): UnstakingDelaySetEventFilter;

    "UnstakingStarted(uint256,uint256,address,uint256,uint256,uint256)"(
      draftId?: BigNumberish | null,
      draftEra?: BigNumberish | null,
      staker?: string | null,
      rsrAmount?: null,
      stRSRAmount?: null,
      availableAt?: null
    ): UnstakingStartedEventFilter;
    UnstakingStarted(
      draftId?: BigNumberish | null,
      draftEra?: BigNumberish | null,
      staker?: string | null,
      rsrAmount?: null,
      stRSRAmount?: null,
      availableAt?: null
    ): UnstakingStartedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    draftQueueLen(
      era_: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    draftQueues(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    draftRate(overrides?: CallOverrides): Promise<BigNumber>;

    endIdForWithdraw(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    firstRemainingDraft(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    init(
      main_: string,
      name_: string,
      symbol_: string,
      unstakingDelay_: BigNumberish,
      rewardPeriod_: BigNumberish,
      rewardRatio_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    main(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    payoutRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRatio(overrides?: CallOverrides): Promise<BigNumber>;

    seizeRSR(
      rsrAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setName(
      name_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardPeriod(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardRatio(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSymbol(
      symbol_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUnstakingDelay(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      rsrAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeRate(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstake(
      stakeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      account: string,
      endId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    draftQueueLen(
      era_: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    draftQueues(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    draftRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endIdForWithdraw(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exchangeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    firstRemainingDraft(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    init(
      main_: string,
      name_: string,
      symbol_: string,
      unstakingDelay_: BigNumberish,
      rewardPeriod_: BigNumberish,
      rewardRatio_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    main(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payoutRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seizeRSR(
      rsrAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setName(
      name_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardPeriod(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardRatio(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSymbol(
      symbol_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUnstakingDelay(
      val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      rsrAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      stakeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakingDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      account: string,
      endId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
